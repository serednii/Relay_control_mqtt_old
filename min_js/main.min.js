
const CLASS_TIME = '.time';
const CLASS_CLEAR = '.clear';
const CLASS_ACTIVE = 'active';
const CLASS_CHANGE = '.change';
const CLASS_DATE_TIME = '.datetime';
const CLASS_RELAY_ITEM = '.rele__item';
const CLASS_RELAY_TEMP_ON = '.rele-temp-vkl';
const CLASS_RELAY_TEMP_BTN = '.rele-temp-btn';
const CLASS_RELAY_NAME_BTN = '.rele__name-btn';
const CLASS_RELAY_TEMP_OFF = '.rele-temp-otkl';
const CLASS_DATE_RED_COLOR = '.date-red__color';
const CLASS_TIME_RED_COLOR = ' .time-red__color';
const CLASS_RELAY_SETTING_SVG = '.rele__seting-svg';
const CLASS_RELAY_TEMP_CHANGE = '.rele-temp-change';
const CLASS_RELAY_CONTROL_TIMER = '.rele-control-timer';
const CLASS_POPUP_INFO_WRAPPER = '.popUp-info__wrapper';
const CLASS_ADDRESS_EEPROM_BTN = '.address-eeprom__btn';
const CLASS_TIME_RED_BACKGROUND = '.time-red__backround';
const CLASS_ADDRESS_EEPROM_SAVE = '.address-eeprom__save';
const CLASS_ADDRESS_EEPROM_DATA = '.address-eeprom__data';
const CLASS_ADDRESS_EEPROM_TEMP = '.address-eeprom__temp';
const CLASS_TIME_BLUE_BACKGROUND = '.time-blue__backround';
const CLASS_DATE_BLUE_BACKGROUND = '.date-blue__backround';
const CLASS_RELAY_SECTION_SETTING = '.rele__section-seting';
const CLASS_RELAY_CONTROL_MANUAL = '.rele__control-manually';
const CLASS__RELAY_TIMERsETTING_SVG = '.rele__timer-seting-svg';
const CLASS_ADDRESS_DEVICE_ADDRESS = ".address-device__address";
const CLASS_ADDRESS_EEPROM_ADDRESS = '.address-eeprom__address';
const CLASS_RELAY_TEMP_CHANGE_SINGLE = '.rele-temp-change-single';
const CLASS_RELAY_CONTROL_CHANGE_RADIO = '.rele-temp-change-radio';
const CLASS_INPUT_CONTROL_MANUAL_SVG = '.input-control-manually-svg';
const CLASS_RELAY_SETTING_SENSOR_TIMER = '.rele__seting-sensor-timer';
const CLASS_RELAY_SETTING_SWITCH_INPUT = 'rele__seting-switch__input';
const CLASS_RELAY_CONTROL_MANUAL_SHOW = 'rele__control-manually-show';
const CLASS_RELAY_CONTROL_MANUAL_ON_OFF = '.rele__control-manually-on-off';
const CLASS_RELAY_TIMER_SETTING_SHOW_INPUT = 'rele__timer-seting-show__input';

"use strict"

let deviceData = {};
let eepromData = {};
let sensorEepromControl = {};
let sensorOpenCloseTemperature = {};
let sensorNames = {};
let relayNames = {};
let relaySettings = {};
let isEepromDataDownloaded = false;
let isDeviceDataDownloaded = false;
let showEepromData = true;
let selectEepromDataSensor = null;
let dateTimeArray = [];
let userName;


if (localStorage.getItem('Device') != null) {
    console.log(localStorage.getItem('nameDevice'));
    const nameDevices = JSON.parse(localStorage.getItem('Device'));
    document.querySelector('.info__local-storage').innerText = nameDevices.NameDevice + '  ---   ' + nameDevices.Name;
    userName = nameDevices.NameDevice;
    document.querySelector('.popup-local-storage').classList.remove('popup-local-storage__show');
} else {
    console.log('none');
    document.querySelector('.popup-local-storage').classList.add('popup-local-storage__show');
}


const monitor = document.querySelectorAll('.data-topic');
let client = new Paho.MQTT.Client("broker.hivemq.com", 8000, "userName-" + parseInt(Math.random() * 100, 10));
client.onConnectionLost = onConnectionLost;
client.onMessageArrived = onMessageArrived;


const printAnalogInput = document.querySelector('.popup-info__analog-input');
const parentListEeprom = document.querySelectorAll(CLASS_ADDRESS_EEPROM_DATA);
const tableEepromNumber = document.querySelectorAll('.address-eeprom__number');
const tableEepromAddress = document.querySelectorAll(CLASS_ADDRESS_EEPROM_ADDRESS);
const tableEepromNameSensor = document.querySelectorAll('.address-eeprom-name');

let inputDey;
let labelDey;
let relayTempChangeRadio;
let tableEepromTemp;
let tableDeviceNumber;
let tableDeviceAddress;
let tableDeviceTemp;
let relayItem;
let relayNameInput;
let delayWhenTurned;
let relayControlTimer;
let popupTemp;
let popupInfoTempItem;
let parentListDevice;
let btnDefineDevice;
let timeBtn;
let timeBtnClear;
let relayItemTitlePin;

const startSelector = () => {
    //input and label class
    return new Promise(resolve => {
        inputDey = document.querySelectorAll('.day');
        labelDey = document.querySelectorAll('.label-day');
        relayTempChangeRadio = document.querySelectorAll(CLASS_RELAY_CONTROL_CHANGE_RADIO);
        tableEepromTemp = document.querySelectorAll(CLASS_ADDRESS_EEPROM_TEMP);
        tableDeviceNumber = document.querySelectorAll('.address-device__number');
        tableDeviceAddress = document.querySelectorAll(CLASS_ADDRESS_DEVICE_ADDRESS);
        tableDeviceTemp = document.querySelectorAll('.address-device__temp');
        relayItem = document.querySelectorAll(CLASS_RELAY_ITEM);
        relayNameInput = document.querySelectorAll('.rele__name-input');
        delayWhenTurned = document.querySelectorAll('.delay-when-turned');
        relayControlTimer = document.querySelectorAll('.delay-when-turned');
        popupTemp = document.querySelectorAll('.popup-info__temp-item');
        popupInfoTempItem = document.querySelectorAll('.popup-info__lamp-link');
        parentListDevice = document.querySelectorAll('.address-device__data');
        btnDefineDevice = document.querySelector('.popup-menu__btn-define-device');
        timeBtn = document.querySelectorAll('.time__btn ');
        timeBtnClear = document.querySelectorAll('.time__btn-clear');
        relayItemTitlePin = document.querySelectorAll('.rele__item-title-pin');
        console.log('start function startSelector()');
        resolve();
    });

}


//**************************************************************************************** */

const CONNECT_SSID = userName + '_ssid';
const LOCAL_IP = userName + '_ip';
const GET_ANALOG_INPUT_A0 = userName + 'analogInputA0';
const RELAY_STATUS = userName + '_stanRele';
const GET_EEPROM_SENSOR_DATA = userName + '_eepromSensorData';
const GET_DEVICE_SENSOR_DATA = userName + '_deviceSensorData';
const OUT_START_DATA_SENSOR = userName + '_start-data-sensor-eepromAndDevice';
const OUT_SAVE_DATA_SENSOR_EEPROM = userName + '_save-data-sensor-eeprom';
const OUT_SAVE_NAME_SENSOR_EEPROM = userName + '_save-name-sensor-eeprom';
const OUT_SAVE_DATA_SENSOR_TEMP = userName + '_save-data-sensor-temp';
const OUT_SAVE_RELAY_NAME = userName + '_save-rele-name';
const GET_RELAY_EEPROM_UPR = userName + '_rele_eprom_upr';
const SET_RELAY_EEPROM_UPR = userName + '_rele_eprom_upr-set_number_sensor';
const SET_RELAY_EEPROM_UPR_ERROR_RELAY_ON_OFF = userName + '_rele_eprom_upr-set_erorr_rele_vkl_vukl';
const SET_RELAY_EEPROM_UPR_ONE_OR_TWO_RANGE_TEMP = userName + '_rele_eprom_upr-set_one_or_two_range_temp';
const SET_RELAY_EEPROM_UPR_CHANGE_ON_OR_OFF = userName + '_rele_eprom_upr-set_change_on_or_off';
const SET_RELAY_EEPROM_CONTROL_MANUAL = userName + '_rele-get-eprom_upr-manual';
const SET_RELAY_ON_OFF = userName + '_set-rele-vkl-otkl';
const SET_RELAY_DATA_TIME = userName + '_set-rele-data-time';
const SET_DEFINE_DEVICE = userName + '_define_device';
const SET_RESET_FUNCTION = userName + '_resetFunction';
const GET_RELAY_DATA_TIME = userName + '_out-web-rele-data-time';
const GET_SENSOR_NAME = userName + '_sensor-name';
const GET_RELAY_NAME = userName + '_rele-name';
const GET_RELAY_EEPROM_CONTROL_MANUAL = userName + '_rele-out-eprom_upr-manual';
const GET_SENSOR_TEMP_ON_OFF = userName + '_sensor-vkl-otkl';







let options = {
    onSuccess: onConnect,
    onFailure: doFail
};

// connect the client
client.connect(options);

// called when the client connects
function onConnect() {
    // Once a connection has been made, make a subscription and send a message.
    console.log("onConnect");
    client.subscribe(GET_EEPROM_SENSOR_DATA);
    client.subscribe(GET_DEVICE_SENSOR_DATA);
    client.subscribe(GET_RELAY_EEPROM_UPR);
    client.subscribe(GET_SENSOR_TEMP_ON_OFF);
    client.subscribe(RELAY_STATUS);
    client.subscribe(GET_SENSOR_NAME);
    client.subscribe(GET_RELAY_NAME);
    client.subscribe(GET_RELAY_EEPROM_CONTROL_MANUAL);
    client.subscribe(GET_RELAY_DATA_TIME);
    client.subscribe(CONNECT_SSID);
    client.subscribe(LOCAL_IP);
    client.subscribe(GET_ANALOG_INPUT_A0);
    sendMessage(OUT_START_DATA_SENSOR, 'ALL');
}

function doFail(e) { }
// console.log(e);
// called when the client loses its connection
function onConnectionLost(responseObject) {
    if (responseObject.errorCode !== 0) {
        console.log("onConnectionLost:" + responseObject.errorMessage);
    }
}
//************************************************************************************************************** */
function sendMessage(topic, message) {
    let mes = new Paho.MQTT.Message(message);
    mes.destinationName = topic;
    mes.qos = 0;
    client.send(mes);
}
// *************************************************************************************************************************



let obj_1, obj_2, obj_3;

function onMessageArrived(message) {
    try {
        handleAnalogInput(message);
        handleSSID(message);
        handleLocalIP(message);
        handleReleEpromUprManual(message);
        handleReleState(message);
        handleSensorVklOtklTemp(message);
        handleReleEpromUpr(message);
        handleEepromSensorData(message);
        handleDeviceSensorData(message);
        handleSensorNames(message);
        handleReleNames(message);
        handleReleDateTime(message);
    } catch (e) {
        console.error('Error in onMessageArrived: ', e);
    }
}

function handleAnalogInput(message) {
    try {
        if (message.destinationName === GET_ANALOG_INPUT_A0) {
            printAnalogInput.innerText = message.payloadString;
        }
    } catch (e) {
        console.error('Error in handleAnalogInput: ', e);
    }
}

function handleSSID(message) {
    try {
        if (message.destinationName === CONNECT_SSID) {
            document.querySelector('.info__ssid').innerText = message.payloadString;
        }
    } catch (e) {
        console.error('Error in handleSSID: ', e);
    }
}

function handleLocalIP(message) {
    try {
        if (message.destinationName === LOCAL_IP) {
            document.querySelector('.info__ip').innerText = message.payloadString;
        }
    } catch (e) {
        console.error('Error in handleLocalIP: ', e);
    }
}

function handleEepromSensorData(message) {
    try {
        if (message.destinationName === GET_EEPROM_SENSOR_DATA) {
            eepromData = JSON.parse(message.payloadString);
            for (let _k = 0; _k < eepromData.obj.length; _k++) {
                updateEepromTable(_k);
            }
            isEepromDataDownloaded = true;
            checkAndUpdateData();
        }
    } catch (e) {
        console.error('Error in handleEepromSensorData: ', e);
    }
}

function updateEepromTable(index) {
    if (showEepromData) {
        tableEepromNumber[index + 1].innerText = eepromData.obj[index].number;
        tableEepromAddress[index + 1].innerText = eepromData.obj[index].address.toUpperCase();
    }
    tableEepromTemp[index + 1].innerText = eepromData.obj[index].temp.toFixed(1);

    if (eepromData.obj[index].address != '0000000000000000') {
        if (sensorNames.obj != undefined) {
            popupTemp[index].textContent = sensorNames.obj[index].nameSensor + ' ' + eepromData.obj[index].temp.toFixed(1);
        } else {
            popupTemp[index].innerText = eepromData.obj[index].temp.toFixed(1);
        }
    } else {
        popupTemp[index].closest('.popup-info__lamp-item').classList.add('shiden');
    }
}

function handleDeviceSensorData(message) {
    try {
        if (message.destinationName === GET_DEVICE_SENSOR_DATA) {
            deviceData = JSON.parse(message.payloadString);
            for (let _k2 = 0; _k2 < deviceData.obj.length; _k2++) {
                updateDeviceTable(_k2);
            }
            isDeviceDataDownloaded = true;
            checkAndUpdateData();
        }
    } catch (e) {
        console.error('Error in handleDeviceSensorData: ', e);
    }
}

function updateDeviceTable(index) {
    tableDeviceNumber[index + 1].innerText = deviceData.obj[index].number;
    tableDeviceAddress[index + 1].innerText = deviceData.obj[index].address.toUpperCase();
    tableDeviceTemp[index + 1].innerText = deviceData.obj[index].temp.toFixed(1);
}

function checkAndUpdateData() {
    if (isDeviceDataDownloaded && isEepromDataDownloaded) {
        updateRelaySettings();
        highlightMismatchedSensorAddresses();
    }
}

function handleReleEpromUpr(message) {
    try {
        if (message.destinationName === GET_RELAY_EEPROM_UPR) {
            sensorEepromControl = JSON.parse(message.payloadString);
            updateRelaySettings();
        }
    } catch (e) {
        console.error('Error in handleReleEpromUpr: ', e);
    }
}

function updateRelaySettings() {
    // Логіка для оновлення налаштувань реле на основі sensorEepromControl
}

function handleSensorVklOtklTemp(message) {
    try {
        if (message.destinationName === GET_SENSOR_TEMP_ON_OFF) {
            sensorOpenCloseTemperature = JSON.parse(message.payloadString);
            updateRelayTemperatureSettings();
        }
    } catch (e) {
        console.error('Error in handleSensorVklOtklTemp: ', e);
    }
}


function handleReleState(message) {
    try {
        if (message.destinationName === RELAY_STATUS) {
            const stanReleTemp = parseInt(message.payloadString);
            console.log("message ", message)
            updateReleState(stanReleTemp);
        }
    } catch (e) {
        console.error('Error in handleReleState: ', e);
    }
}

function updateReleState(stanReleTemp) {
    const relayOnOff = document.querySelectorAll(CLASS_RELAY_CONTROL_MANUAL_ON_OFF);
    for (let n = 0; n < 8; n++) {
        if (stanReleTemp & (1 << n)) {
            relayOnOff[n].checked = false;
            popupInfoTempItem[n].classList.remove('on');
        } else {
            relayOnOff[n].checked = true;
            popupInfoTempItem[n].classList.add('on');
        }
    }
}

function handleSensorNames(message) {
    try {
        if (message.destinationName === GET_SENSOR_NAME) {
            sensorNames = JSON.parse(message.payloadString);
            updateSensorNames();
        }
    } catch (e) {
        console.error('Error in handleSensorNames: ', e);
        sendMessage(SET_DEFINE_DEVICE, 'SET_DEFINE_DEVICE');
    }
}

function updateSensorNames() {
    tableEepromNameSensor.forEach((e, i) => {
        if (i > 0) {
            e.value = sensorNames.obj[i - 1].nameSensor;
        }
    });
}

function handleReleNames(message) {
    try {
        if (message.destinationName === GET_RELAY_NAME) {
            relayNames = JSON.parse(message.payloadString);
            updateReleNames();
        }
    } catch (e) {
        console.error('Error in handleReleNames: ', e);
        sendMessage(SET_DEFINE_DEVICE, 'SET_DEFINE_DEVICE');
    }
}

function updateReleNames() {
    const releItemTitleName = document.querySelectorAll('.rele__item-title-name');
    releItemTitleName.forEach((e, i) => {
        e.textContent = relayNames.obj[i].nameRele;
    });

    relayNameInput.forEach(function (e, i) {
        e.value = relayNames.obj[i].nameRele;
        popupInfoTempItem[i].textContent = relayNames.obj[i].nameRele;
        releItemTitleName[i].textContent = relayNames.obj[i].nameRele;
    });
}

function handleReleEpromUprManual(message) {
    try {
        if (message.destinationName === GET_RELAY_EEPROM_CONTROL_MANUAL) {
            let relaySettings = JSON.parse(message.payloadString);
            updateRelayManualSettings(relaySettings);
        }
    } catch (e) {
        console.error('Error in handleReleEpromUprManual: ', e);
    }
}



function updateRelayManualSettings(relaySettings) {
    document.querySelectorAll(CLASS_INPUT_CONTROL_MANUAL_SVG).forEach((e, i) => {
        const parent = e.closest(CLASS_RELAY_ITEM);
        const inputSvg = parent.querySelector(CLASS_INPUT_CONTROL_MANUAL_SVG);
        const manualShow = parent.querySelector(`.${CLASS_RELAY_CONTROL_MANUAL_SHOW}`);
        const manual = parent.querySelector(CLASS_RELAY_CONTROL_MANUAL);
        const settingTimer = parent.querySelector(CLASS_RELAY_SETTING_SENSOR_TIMER);

        if (relaySettings.obj[i].namberRele == 1) {
            inputSvg.classList.add('on');
            manualShow.classList.add('on');
            manual.classList.add('show-block');
            settingTimer.classList.add('block__hidden');
        } else if (relaySettings.obj[i].namberRele == 0) {
            inputSvg.classList.remove('on');
            manualShow.classList.remove('on');
            manual.classList.remove('show-block');
            settingTimer.classList.remove('block__hidden');
        }
    });
}

function handleReleDateTime(message) {
    try {
        if (message.destinationName === GET_RELAY_DATA_TIME) {
            parseRelayDateTime(message.payloadString);

        }
    } catch (e) {
        console.error('Error in handleReleDateTime: ', e);
    }
}

function parseRelayDateTime(payload) {
    const tempObj = JSON.parse(payload);
    if (tempObj.NUMPACKAGE === 1) {
        obj_1 = Object.assign({}, tempObj);
    }

    if (tempObj.NUMPACKAGE === 2) {
        obj_2 = Object.assign({}, tempObj);
    }

    if (tempObj.NUMPACKAGE === 3) {
        obj_2.TIME = obj_2.TIME.concat(tempObj.TIME);
    }

    if (tempObj.NUMPACKAGE === 4) {
        obj_3 = Object.assign({}, tempObj);
        relaySettings = Object.assign(obj_1, obj_2, obj_3);
        console.log(relaySettings);
        const namberRele = parseInt(relaySettings.NUM);
        const dateTimeInput = relayItem[namberRele].querySelectorAll(CLASS_DATE_TIME);
        const timeInput = relayItem[namberRele].querySelectorAll(CLASS_TIME);
        const dayWikend = relayItem[namberRele].querySelectorAll('.day');

        dateTimeInput.forEach(e => e.value = '');
        timeInput.forEach(e => e.value = '');
        dayWikend.forEach(e => e.checked = true);

        const delaySecondStart = parseInt(relaySettings.DELAYSECONDSTART);

        if (delaySecondStart < 36000) relayControlTimer[namberRele].value = delaySecondStart;
        else relayControlTimer[namberRele].value = '0';

        // dateTimeInput[0].value = "2022-05-02T12:55";
        for (let i = 0; i < 9; i += 2) {
            if (relaySettings.DATATIME[i] != '65535-99-99T99:99' && relaySettings.DATATIME[i + 1] != '65535-99-99T99:99') {
                // console.log(relaySettings.DATATIME[i]);
                // console.log(relaySettings.DATATIME[i + 1]);
                dateTimeInput[i].value = relaySettings.DATATIME[i];
                dateTimeInput[i + 1].value = relaySettings.DATATIME[i + 1];
                dateTimeArray[namberRele].dateTimeList[i] = new Date(relaySettings.DATATIME[i]).getTime();
                dateTimeArray[namberRele].dateTimeRealList[i] = new Date(relaySettings.DATATIME[i]);
                dateTimeArray[namberRele].dateTimeList[i + 1] = new Date(relaySettings.DATATIME[i + 1]).getTime();
                dateTimeArray[namberRele].dateTimeRealList[i + 1] = new Date(relaySettings.DATATIME[i + 1]);
            }
        }

        for (let i = 0; i < 49; i += 2) {
            if (relaySettings.TIME[i] != '99:99' && relaySettings.TIME[i + 1] != '99:99') {
                // console.log(relaySettings.TIME[i]); 
                // console.log( relaySettings.TIME[i+1]);
                timeInput[i].value = relaySettings.TIME[i];
                timeInput[i + 1].value = relaySettings.TIME[i + 1];
                dateTimeArray[namberRele].timeList[i] = new Date(relaySettings.DATATIME[i]);
                dateTimeArray[namberRele].timeRealList[i + 1] = new Date(relaySettings.DATATIME[i + 1]);
            }
        }

        for (let i = 0; i < 35; i++) {
            if (relaySettings.DEY[i] == 1) {
                dayWikend[i].checked = true;
                dayWikend[i].previousElementSibling.classList.add('checked');
            }
            if (relaySettings.DEY[i] == 0) {
                dayWikend[i].checked = false;
                dayWikend[i].previousElementSibling.classList.remove('checked');
            }
        }

        relayItem.forEach((parent) => {
            const datetime = parent.querySelectorAll(CLASS_DATE_TIME);
            const time = parent.querySelectorAll(CLASS_TIME);
            checkDate(parent, datetime, time);
            checkTime(parent, datetime, time);
            showTimerIcons(parent, datetime, time); //Добавляє іконки таймера
        });

    }
}






const svgTimerSeting =
  `
<svg class="rele__timer-seting-svg" version="1.1" width="32" height="32" viewBox="0 0 256 256">

<g style="stroke: none; stroke-width: 0; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: none; fill-rule: nonzero; opacity: 1;"
transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)">
<rect x="2.34" y="32.74" rx="0" ry="0" width="86.37" height="47.98"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(228,231,231); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="21.15" y="8.89" rx="0" ry="0" width="7.34" height="13.76"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(191,57,44); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="62.15" y="8.89" rx="0" ry="0" width="7.34" height="13.76"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(191,57,44); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<path
d="M 71.33 14.891 v -8 H 58.67 v 8 H 31.33 v -8 H 18.67 v 8 H 0 v 0 v 20.348 v 47.871 h 90 V 35.238 V 14.891 v 0 H 71.33 z M 62.67 10.891 h 4.66 v 10.174 h -4.66 V 10.891 z M 22.67 10.891 h 4.66 v 10.174 h -4.66 V 10.891 z M 86 79.109 H 4 V 35.238 h 82 V 79.109 z"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10;opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " stroke-linecap="round" />
<rect x="10" y="52.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="10" y="64.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="22.25" y="40.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="22.25" y="52.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="22.25" y="64.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="34.49" y="40.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="34.49" y="52.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="34.49" y="64.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="46.74" y="40.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="46.74" y="52.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="46.74" y="64.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="58.99" y="40.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="58.99" y="52.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="58.99" y="64.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="71.23" y="40.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
<rect x="71.23" y="52.7" rx="0" ry="0" width="8.77" height="9.03"
style="stroke: none; stroke-width: 1; stroke-dasharray: none; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; fill: rgb(55,79,91); fill-rule: nonzero; opacity: 1;"
transform=" matrix(1 0 0 1 0 0) " />
</g>
</svg>
`


const svgReleSeting =
  `
<svg class="rele__seting-svg" version="1.1" x="0px" y="0px" viewBox="0 0 392.533 392.533">
<path
d="M326.363,163.491c-3.168-12.671-8.21-24.76-14.933-36.008c-1.939-3.232-2.069-7.24-0.323-10.667
l18.101-34.521l-18.941-18.941l-34.521,18.101c-3.426,1.745-7.434,1.616-10.667-0.323c-11.184-6.723-23.337-11.766-36.008-14.933
c-3.685-0.905-6.659-3.685-7.758-7.37l-11.572-37.107h-26.764l-11.572,37.172c-1.164,3.62-4.073,6.4-7.758,7.37
c-12.671,3.168-24.76,8.21-36.008,14.933c-3.232,1.939-7.24,2.069-10.667,0.323L82.452,63.418L63.511,82.36l18.101,34.521
c1.745,3.426,1.616,7.434-0.323,10.667c-6.723,11.184-11.766,23.337-14.933,36.008c-0.905,3.685-3.685,6.659-7.37,7.758
l-37.172,11.572v26.764l37.172,11.572c3.62,1.164,6.4,4.073,7.37,7.758c3.168,12.671,8.21,24.824,14.933,36.008
c1.939,3.232,2.069,7.24,0.323,10.667l-18.101,34.521l18.941,18.941l34.521-18.101c3.297-1.745,7.434-1.616,10.667,0.323
c11.184,6.723,23.337,11.766,36.008,14.933c3.685,0.905,6.659,3.685,7.758,7.37l11.572,37.172h26.764l11.572-37.172
c1.164-3.62,4.073-6.4,7.758-7.37c12.671-3.168,24.824-8.21,36.008-14.933c3.232-1.939,7.24-2.069,10.667-0.323l34.521,18.101
l18.941-18.941l-18.101-34.521c-1.745-3.426-1.616-7.434,0.323-10.667c6.723-11.184,11.766-23.337,14.933-36.008
c0.905-3.685,3.685-6.659,7.37-7.758l37.172-11.572v-26.764l-37.172-11.572C330.048,170.15,327.268,167.24,326.363,163.491z" />
<path d="M196.359,106.085c-49.713,0-90.182,40.404-90.182,90.182c0,19.846,6.594,38.141,17.455,53.075
c7.499-20.945,27.539-35.943,51.071-35.943h43.572c23.402,0,43.378,14.933,50.941,35.685c10.796-14.933,17.325-33.164,17.325-52.945
C286.541,146.554,246.072,106.085,196.359,106.085z M196.359,200.275c-22.044,0-39.952-17.907-39.952-39.952
s17.907-39.951,39.952-39.951s39.952,17.907,39.952,39.951S218.404,200.275,196.359,200.275z" />
<g>
<path style="fill:#FFFFFF;"
  d="M217.628,235.184h-42.214c-18.23,0-33.099,14.739-33.164,32.97
c15.063,11.378,33.875,18.23,54.174,18.23c20.428,0,39.24-6.853,54.368-18.36C250.533,249.923,235.794,235.184,217.628,235.184z" />
<path style="fill:#FFFFFF;" d="M196.359,142.093c-10.02,0-18.166,8.145-18.166,18.166s8.145,18.166,18.166,18.166
s18.166-8.145,18.166-18.166C214.525,150.303,206.38,142.093,196.359,142.093z" />
</g>
<g>
<path style="fill:#194F82;" d="M196.359,120.307c-22.044,0-39.952,17.907-39.952,39.952s17.907,39.952,39.952,39.952
s39.952-17.907,39.952-39.952S218.404,120.307,196.359,120.307z M196.359,178.424c-10.02,0-18.166-8.145-18.166-18.166
s8.145-18.166,18.166-18.166s18.166,8.145,18.166,18.166S206.38,178.424,196.359,178.424z" />
<path style="fill:#194F82;" d="M384.998,164.525l-39.111-12.283c-3.103-10.602-7.37-20.881-12.671-30.513l19.006-36.331
c2.263-4.267,1.422-9.438-1.939-12.735l-30.319-30.319c-3.426-3.426-8.598-4.202-12.735-1.939L270.897,59.41
c-9.762-5.301-19.911-9.568-30.513-12.671L228.165,7.628C226.679,3.038,222.477,0,217.757,0h-42.731
c-4.784,0-8.986,3.103-10.408,7.628l-12.283,39.111c-10.602,3.103-20.881,7.37-30.513,12.671L85.491,40.404
c-4.267-2.263-9.438-1.422-12.735,1.939L42.436,72.663c-3.426,3.426-4.202,8.598-1.939,12.735l19.006,36.331
c-5.301,9.762-9.568,19.911-12.671,30.513L7.721,164.461c-4.59,1.487-7.628,5.689-7.628,10.408V217.6
c0,4.784,3.103,8.986,7.628,10.408l39.111,12.283c3.103,10.602,7.37,20.881,12.671,30.513l-19.006,36.331
c-2.263,4.267-1.422,9.438,1.939,12.735l30.319,30.319c3.426,3.426,8.598,4.202,12.735,1.939l36.331-19.006
c9.762,5.301,19.911,9.568,30.513,12.671l12.218,39.111c1.422,4.59,5.624,7.628,10.408,7.628h42.731
c4.784,0,8.986-3.103,10.408-7.628l12.218-39.111c10.602-3.103,20.881-7.37,30.513-12.671l36.331,19.006
c4.267,2.263,9.438,1.422,12.735-1.939l30.19-30.19c3.426-3.426,4.202-8.598,1.939-12.735l-19.006-36.331
c5.301-9.762,9.568-19.911,12.671-30.513l39.111-12.218c4.59-1.422,7.628-5.624,7.628-10.408v-42.731
C392.626,170.15,389.523,165.883,384.998,164.525z M370.84,209.649l-37.172,11.572c-3.62,1.164-6.4,4.073-7.37,7.758
c-3.168,12.671-8.21,24.76-14.933,36.008c-1.939,3.232-2.069,7.24-0.323,10.667l18.101,34.521l-18.941,18.941l-34.521-18.101
c-3.426-1.745-7.434-1.616-10.667,0.323c-11.184,6.723-23.337,11.766-36.008,14.933c-3.685,0.905-6.659,3.685-7.758,7.37
l-11.572,37.172h-26.764l-11.572-37.172c-1.164-3.62-4.073-6.4-7.758-7.37c-12.671-3.168-24.824-8.21-36.008-14.933
c-3.232-1.939-7.24-2.069-10.667-0.323l-34.521,18.101l-18.941-18.941l18.101-34.521c1.745-3.426,1.616-7.434-0.323-10.667
c-6.723-11.184-11.766-23.337-14.933-36.008c-0.905-3.685-3.685-6.659-7.37-7.758l-37.172-11.572v-26.764l37.172-11.572
c3.62-1.164,6.4-4.073,7.37-7.758c3.168-12.671,8.21-24.824,14.933-36.008c1.939-3.232,2.069-7.24,0.323-10.667L63.446,82.36
l18.941-18.941l34.521,18.101c3.426,1.745,7.434,1.616,10.667-0.323c11.184-6.723,23.337-11.766,36.008-14.933
c3.685-0.905,6.659-3.685,7.758-7.37l11.572-37.172h26.764l11.572,37.172c1.164,3.62,4.073,6.4,7.758,7.37
c12.671,3.168,24.76,8.21,36.008,14.933c3.232,1.939,7.24,2.069,10.667,0.323l34.521-18.101l18.941,18.941l-18.101,34.521
c-1.745,3.426-1.616,7.434,0.323,10.667c6.723,11.184,11.766,23.337,14.933,36.008c0.905,3.685,3.685,6.659,7.37,7.758
l37.172,11.572V209.649z" />
<path style="fill:#194F82;" d="M196.359,84.299c-61.737,0-111.968,50.23-111.968,111.968s50.23,111.968,111.968,111.968
s111.968-50.23,111.968-111.968S258.097,84.299,196.359,84.299z M196.295,286.384c-20.234,0.065-38.917-6.788-54.109-18.166
c0.065-18.23,14.933-32.97,33.164-32.97h42.214c18.166,0,32.905,14.61,33.164,32.776
C235.535,279.467,216.788,286.384,196.295,286.384z M269.216,249.212c-7.564-20.881-27.539-35.749-50.941-35.749h-43.572
c-23.596,0-43.507,14.998-51.071,35.943c-10.925-14.933-17.455-33.228-17.455-53.075c0-49.713,40.404-90.182,90.182-90.182
s90.182,40.404,90.182,90.117C286.541,216.049,280.077,234.279,269.216,249.212z" />
</g>
</svg>
`


const svgReleTimerSeting =
  `
<div class="rele__timer-seting-icon">
              <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
                id="Layer_1" x="0px" y="0px" viewBox="0 0 502 502" style="enable-background:new 0 0 502 502;"
                xml:space="preserve">
                <g>
                  <circle style="fill:#535C61;" cx="251" cy="286.566" r="205.434" />
                  <rect x="196.855" y="10" style="fill:#535C61;" width="108.291" height="36.097" />
                  <circle style="fill:#E4DCD3;" cx="251" cy="286.566" r="164.029" />
                  <g>
                    <path
                      d="M420.24,153.233l12.837-12.837l12.57,12.57c1.953,1.953,4.512,2.929,7.071,2.929s5.118-0.977,7.071-2.929    c3.905-3.905,3.905-10.237,0-14.142l-40.344-40.343c-3.906-3.905-10.236-3.905-14.143,0c-3.905,3.905-3.905,10.237,0,14.142    l13.632,13.632l-11.835,11.835c-1.237-1.299-2.492-2.585-3.764-3.857C365.01,95.908,314.79,73.808,261,71.367v-15.27h44.146    c5.522,0,10-4.477,10-10V10c0-5.523-4.478-10-10-10H196.854c-5.522,0-10,4.477-10,10v36.097c0,5.523,4.478,10,10,10H241v15.27    c-53.79,2.441-104.01,24.541-142.335,62.865c-40.689,40.69-63.099,94.79-63.099,152.334s22.41,111.644,63.099,152.335    C139.355,479.591,193.455,502,251,502s111.645-22.409,152.335-63.099c40.689-40.69,63.099-94.791,63.099-152.335    C466.434,237.573,450.179,191.082,420.24,153.233z M206.854,20h88.291v16.097h-88.291V20L206.854,20z M251,482    c-107.763,0-195.434-87.671-195.434-195.434c0-107.762,87.671-195.434,195.434-195.434s195.434,87.671,195.434,195.434    C446.434,394.329,358.763,482,251,482z" />
                    <path
                      d="M251,112.538c-95.96,0-174.028,78.069-174.028,174.028c0,95.96,78.068,174.029,174.028,174.029    s174.028-78.069,174.028-174.029S346.96,112.538,251,112.538z M251,440.595c-84.932,0-154.028-69.097-154.028-154.029    S166.068,132.538,251,132.538s154.028,69.097,154.028,154.028S335.932,440.595,251,440.595z" />
                    <path
                      d="M251,200.656c-5.522,0-10,4.477-10,10v75.379c0,5.523,4.478,10,10,10s10-4.477,10-10v-75.379    C261,205.133,256.522,200.656,251,200.656z" />
                    <path
                      d="M251,387.511c-5.522,0-10,4.477-10,10v18.048c0,5.523,4.478,10,10,10s10-4.477,10-10v-18.048    C261,391.988,256.522,387.511,251,387.511z" />
                    <path
                      d="M324.613,370.343c-3.247-4.469-9.501-5.458-13.968-2.212c-4.468,3.246-5.458,9.5-2.212,13.968l10.609,14.602    c1.957,2.693,5.006,4.123,8.098,4.123c2.038,0,4.096-0.621,5.87-1.911c4.468-3.246,5.458-9.5,2.212-13.968L324.613,370.343z" />
                    <path
                      d="M377.275,316.55l-17.165-5.578c-5.254-1.706-10.896,1.167-12.602,6.42c-1.706,5.252,1.168,10.894,6.42,12.601    l17.165,5.578c1.027,0.333,2.068,0.492,3.093,0.492c4.215,0,8.136-2.687,9.509-6.913    C385.401,323.898,382.527,318.257,377.275,316.55z" />
                    <path
                      d="M357.018,261.59c1.023,0,2.065-0.159,3.092-0.492l17.165-5.577c5.253-1.707,8.127-7.348,6.421-12.601    c-1.706-5.251-7.347-8.127-12.601-6.42l-17.165,5.577c-5.253,1.707-8.127,7.348-6.421,12.601    C348.882,258.903,352.802,261.59,357.018,261.59z" />
                    <path
                      d="M333.011,173.158c-4.464-3.246-10.722-2.257-13.968,2.212l-10.609,14.602c-3.246,4.468-2.256,10.722,2.212,13.968    c1.774,1.29,3.831,1.911,5.87,1.911c3.092,0,6.142-1.429,8.098-4.123l10.609-14.602    C338.469,182.658,337.479,176.404,333.011,173.158z" />
                    <path
                      d="M251,146.511c-5.522,0-10,4.477-10,10v18.048c0,5.523,4.478,10,10,10s10-4.477,10-10v-18.048    C261,150.988,256.522,146.511,251,146.511z" />
                    <path
                      d="M182.957,175.37c-3.248-4.469-9.502-5.458-13.968-2.212c-4.468,3.246-5.458,9.5-2.212,13.968l10.609,14.602    c1.957,2.693,5.006,4.123,8.098,4.123c2.038,0,4.096-0.621,5.87-1.911c4.468-3.246,5.458-9.5,2.212-13.968L182.957,175.37z" />
                    <path
                      d="M148.07,242.077l-17.165-5.577c-5.25-1.706-10.895,1.168-12.601,6.42c-1.706,5.253,1.168,10.895,6.421,12.601    l17.165,5.577c1.026,0.333,2.067,0.492,3.092,0.492c4.215,0,8.136-2.687,9.509-6.913    C156.197,249.425,153.323,243.783,148.07,242.077z" />
                    <path
                      d="M141.89,310.972l-17.165,5.578c-5.252,1.707-8.126,7.349-6.42,12.601c1.373,4.226,5.293,6.913,9.509,6.913    c1.023,0,2.065-0.159,3.093-0.492l17.165-5.578c5.252-1.707,8.126-7.348,6.42-12.601    C152.785,312.141,147.148,309.265,141.89,310.972z" />
                    <path
                      d="M191.354,368.131c-4.464-3.245-10.722-2.258-13.968,2.212l-10.609,14.602c-3.246,4.468-2.256,10.722,2.212,13.968    c1.774,1.29,3.831,1.911,5.87,1.911c3.092,0,6.142-1.429,8.098-4.123l10.609-14.602    C196.813,377.631,195.822,371.377,191.354,368.131z" />
                  </g>
                </g>
                <g></g>
                <g> </g>
                <g> </g>
                <g> </g>
                <g> </g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
                <g></g>
              </svg>
            </div>
`

const svgManual =
  `
<svg class="input-control-manually-svg" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="32px" height="32px"
viewBox="0 0 612.099 612.1" style="enable-background:new 0 0 612.099 612.1;" xml:space="preserve">
<g>
<path
  d="M326.224,161.7l74.5,17.2l-4.3,18.6l-74.5-17.2L326.224,161.7z    M259.424,0h-19.1v76.5h19.1V0z M375.724,64l-12-14.9
l-59.4,48.1l12,14.9L375.724,64z M178.924,179.7l-4.3-18.6l-74.5,17.2l4.3,18.6L178.924,179.7z M527.125,334.7v114.8
c0,89.9-72.7,162.6-162.601,162.6c-61.2,0-122.4-28.699-166.4-107.1c-61.1-112.9-141.5-187.5-103.2-225.8
c26.8-26.8,68.9,0,107.1,34.399V143.4c0-26.8,21-47.8,47.8-47.8c26.8,0,47.8,21,47.8,47.8V239c7.6-5.7,17.199-9.6,28.699-9.6
c19.101,0,36.301,11.5,44,30.6c9.601-7.7,21-11.5,32.5-11.5c26.801,0,47.801,21,47.801,47.8c7.6-5.7,17.199-9.6,28.699-9.6
C506.125,286.9,527.125,307.9,527.125,334.7z M508.024,334.7c0-15.3-13.399-28.7-28.7-28.7c-15.3,0-28.699,13.4-28.699,28.7v9.6
h-19.101v-47.8c0-15.3-13.399-28.7-28.7-28.7c-15.3,0-28.699,13.4-28.699,28.7v28.7h-19.101v-47.8c0-15.3-13.399-28.7-28.7-28.7
c-15.3,0-28.699,13.4-28.699,28.7v66.9h-19.101V143.4c0-15.3-13.4-28.7-28.7-28.7c-15.3,0-28.7,13.4-28.7,28.7v216.1
c-40.2-42.1-91.8-88-112.8-66.9c-19.1,21,34.4,78.4,107.1,204.6c34.4,55.5,76.5,95.6,149.201,95.6
c78.399,0,143.399-68.899,143.399-143.399v-72.7V334.7L508.024,334.7z M197.724,97.5l-59.4-48.1l-12,14.9l59.4,48.1L197.724,97.5z" />
</g>
</svg>
`

const liDataTime =
  `
<li class="timer-date__item">
<div class="timer-date__datetime-inner">
<input class="datetime datetime-start" type="datetime-local">
<input class="datetime datetime-end" type="datetime-local">
</div>

<!-- <h3 class="timer-date__time-control">По годинах</h3> -->
<div class="time-inner">
<input class="time time-start" type="time">
<input class="time time-end" type="time">
<input class="time hiden-time time-start" type="time">
<input class="time hiden-time time-end" type="time">
<input class="time hiden-time time-start" type="time">
<input class="time hiden-time time-end" type="time">
<input class="time hiden-time time-start" type="time">
<input class="time hiden-time time-end" type="time">
<input class="time hiden-time time-start" type="time">
<input class="time hiden-time time-end" type="time">
</div>

<div class="timer-day">
<label class="label-day lan-dey_monday" > </label>
<input class="day" type="checkbox" name="ponedilok">
<label class="label-day lan-dey_tuesday" > </label>
<input class="day" type="checkbox" name="vivtorok">
<label class="label-day lan-dey_wednesday" > </label>
<input class="day" type="checkbox" name="sereda">
<label class="label-day lan-dey_thursday" > </label>
<input class="day" type="checkbox" name="chetver">
<label class="label-day lan-dey_friday" > </label>
<input class="day" type="checkbox" name="patek">
<label class="label-day lan-dey_saturday" > </label>
<input class="day" type="checkbox" name="sobote">
<label class="label-day lan-dey_sunday" > </label>
<input class="day" type="checkbox" name="nedele">
</div>
</li>
`

//***************************************************************************************************************************************** */



function innerHtmlText() {
  return new Promise(resolve => {
    let htmlString = "";
    for (let numRele = 0; numRele < 8; numRele++) {
      htmlString +=
        `<li class="rele__item" id="r${numRele}" data-rele="${numRele}">

<div class="rele__item-top">
  <h2 class="rele__item-title">Rele ${numRele} </h2>
  <span class="rele__item-title-pin"></span>
  <span class="rele__item-title-name"></span>
</div>

<div class="rele__seting-sensor-timer">

  <div class="rele__seting-parent">

    <div class="rele__seting-switch__box">
      <div class="rele__seting-switch__checked">
        <a href="#" class="rele__seting-switch__input">
        ${svgReleSeting}
        </a>

      </div>
      <div class="rele__seting-switch__info">
        <span class="rele__seting-switch__sensor"></span>
        <span class="rele__seting-switch__temp-on lan-temp_on"></span>
        <span class="rele__seting-switch__temp-off lan-temp_off "></span>
      </div>
    </div>

    <div class="rele__section-seting">
      <div class="rele__name-wrapper">
        <input class="rele__name-input form-control" type="text" placeholder="name rele" maxlength="40">
          <input class="rele__name-btn btn btn-primary" type="submit" value="Save">
          </div>
          <div class="input-control-error__box" data-toggle="buttons">
            <h2 class="input-control-error__title  lan-error_title">При несправності термодатчика або таймера реле
              залишаємо</h2>
            <div class="btn-group" data-toggle="buttons">
              <label class="input-control-error__label lan-on   btn btn-primary btn-label" ></label>
              <input class="input-control-error btn-input"  type="radio" value="1" name="err${numRele}">
                <label class="input-control-error__label lan-off   btn btn-primary btn-label" ></label>
                <input class="input-control-error btn-input" type="radio" value="0" name="err${numRele}">
                </div>
            </div>

            <div class="rele-temp-change__box">
              <h2 class="rele-temp-change__title lan-change_on_off_rele">При спрацюванні термодатчика або таймера
                включаємо або виключаємо  реле </h2>
              <div class="btn-group" data-toggle="buttons">
                <label class="rele-temp-change__label lan-on btn btn-primary btn-label" ></label>
                <input class="rele-temp-change-radio btn-input" type="radio" value="1"
                  name="vklOtklrele_${numRele}">

                  <label class="rele-temp-change__label lan-off btn btn-primary btn-label" >
                  </label>
                  <input class="rele-temp-change-radio btn-input"  type="radio" value="0"
                    name="vklOtklrele_${numRele}">
                  </div>
              </div>

              <div class="rele__seting-sensor">

                <h3 class="rele__seting-sensor__title lan-control_termo"> Управління термодатчиком</h3>
                <label class="rele__seting-sensor__select-label lan-select_sensor pointer" ></label>
                <select class="rele__seting-sensor__select" name="cars0" >
                  <option value="15">None</option>
                  <!-- <option value="saab">Saab</option>
                  <option value="opel">Opel</option>
                  <option value="audi">Audi</option> -->
                </select>

                <div class="rele-temp-change">

                  <div class="rele-temp-change-input">
                    <div class="rele-temp__inner">
                      <label class="rele-temp-vkl-label rele-temp-vkl-start-label lan-temp_on" ></label>
                      <input class="rele-temp-vkl" type="number" >
                    </div>
                    <div class="rele-temp__inner">
                      <label class="rele-temp-vkl-label rele-temp-vkl-end-label lan-temp_off" ></label>
                      <input class="rele-temp-otkl" type="number" >
                    </div>
                    <input class="rele-temp-btn btn btn-primary" type="submit" value="Change">
                  </div>

                  <div class="rele-temp-change-select btn-group">
                    <div>
                      <label class="rele-temp-change-single__label lan-one_range btn btn-primary btn-label"></label>
                      <input class="rele-temp-change-single btn-input" type="radio" value="1"
                        name="single${numRele}">
                    </div>

                    <div>
                      <label class="rele-temp-change-single__label lan-two_range btn btn-primary btn-label"></label>
                      <input class="rele-temp-change-single btn-input"  type="radio" value="0"
                        name="single${numRele}">
                    </div>
                  </div>
                </div>

              </div>
            </div>

          </div>

          <div class="rele__timer-seting-box">
            <div class="rele__timer-seting-show">
              <a href="#" class="rele__timer-seting-show__input">
              ${svgTimerSeting}
              </a>
              <!-- <input class="rele__timer-seting-show__input switch-input form-check-input"   type="checkbox" name="" value="">
                <label class="rele__timer-seting-show__label lan-control_timer switch-label form-check-label"> </label> -->
            </div>
            ${svgReleTimerSeting}
            ${svgReleTimerSeting}
            ${svgReleTimerSeting}               
            ${svgReleTimerSeting}             
            ${svgReleTimerSeting}
          </div>

          <div class="rele-control-timer ">
            <div class="delay-when-turned__inner">
              <label> Затримка при включені в секундах</label>
              <input class="delay-when-turned" type="number" name="" value="0">
            </div>

            <ul class="timer-date__items">
              <!-- <h3 class="timer-date__datetime-control">По даті і годинах</h3> -->
             ${liDataTime}
             ${liDataTime}
             ${liDataTime}
             ${liDataTime}
             ${liDataTime}
             ${liDataTime}

               <div class="btn-save-clear__box">
               <button class="time__btn btn btn-primary">Save as</button>
               <button class="time__btn-clear btn btn-primary">Cleal as</button>
               </div>

              </ul>
               </div>
               </div>
                <div class="input-control-manually">
                 <div class="input-control-manually-svg-box">
                 <a href="#" class="rele__control-manually-show">
                ${svgManual}
                  </a>
                 </div>
                <div class="rele__control-manually">
                <div class="form-check form-switch">
                 <input class="rele__control-manually-on-off form-check-input" type="checkbox">
                   </div>
               </div>
             </div>
            </li>
                      `
        ;
    }
    // console.log(htmlString);
    let ul = document.createElement("ul");
    ul.classList.add('rele__list');
    ul.innerHTML = htmlString;
    document.querySelector('#rele__list').appendChild(ul);
    console.log('start function innerHtmlText()');
    resolve();
  })


}
// innerHtmlText();


const burgerMenu = document.querySelector('.burger-menu');
const burgerMenuLine = document.querySelector('.burger-menu span');
const popapLocalStorage = document.querySelector('.popup-local-storage');
const btnRestartDevice = document.querySelector('.popup-menu__btn-restart-device');


const POPAP_MENU = document.querySelector('.popup-menu');
const popapLocalStorageMenu = document.querySelector('.popup-local-storage-menu');
const popapLocalStoragMmenuList = document.querySelector('.popup-local-storage-menu__device');
const popapLocalStoragMmenuName = document.querySelector('.popup-local-storage-menu__name');
// console.log(popapLocalStoragMmenuList)


document.querySelector('.popup-local-storage-menu__list').addEventListener('click', selectItemMenu)


// function selectItemMenu(event) { //при виборі нового пристрою добавляємо або міняємо в localStorage і в шапці на горі
//     // event.preventDefault();
//     console.log(event)
//     const dev = event.closest('.popup-local-storage-menu__item').querySelector('.popup-local-storage-menu__device').innerText;
//     const nam = event.closest('.popup-local-storage-menu__item').querySelector('.popup-local-storage-menu__name').innerText;
//     if (dev != 'Name Device' || nam != 'Name') {
//         console.log(dev);
//         console.log(nam);
//         document.querySelector('.info__local-storage').innerText = dev + '     ' + nam;
//         userName = dev;
//         let obj = {
//             NameDevice: dev,
//             Name: nam,
//         }
//         localStorage.setItem('Device', JSON.stringify(obj));
//     }
// }

function selectItemMenu(event) {
    event.preventDefault();
    const dev = event.target.closest('.popup-local-storage-menu__item').querySelector('.popup-local-storage-menu__device').innerText;
    const nam = event.target.closest('.popup-local-storage-menu__item').querySelector('.popup-local-storage-menu__name').innerText;
    if (dev != 'Name Device' || nam != 'Name') {
        console.log(dev);
        console.log(nam);
        document.querySelector('.info__local-storage').innerText = dev + '     ' + nam;
        userName = dev;
        let obj = {
            NameDevice: dev,
            Name: nam,
        }
        localStorage.setItem('Device', JSON.stringify(obj));
        // addEventListenerClick();
    }

}





window.onclick = (e) => {
    // console.log(e.target)

    // if (e.target === popapLocalStoragMmenuList) { //Відкриваємо меню для добавлення або зміни нових пристроїв
    //     console.log(e.target)
    //     selectItemMenu(e.target);
    // }
    if (e.target === btnPoppaAddNewDeviceOpen) { //Відкриваємо меню для добавлення або зміни нових пристроїв
        POPAP_MENU.classList.toggle('popup-menu__show');
        popapLocalStorage.classList.add('popup-local-storage__show');
    }





    if (e.target != POPAP_MENU) //Відкриває закриває бургер меню
        if (e.target != burgerMenu && e.target != burgerMenuLine && e.target != POPAP_MENU) {
            POPAP_MENU.classList.remove('popup-menu__show');
            burgerMenu.classList.remove('showw');
        } else {
            POPAP_MENU.classList.toggle('popup-menu__show');
            burgerMenu.classList.toggle('showw');
        }
};

btnRestartDevice.addEventListener('click', restartDevice);

function restartDevice() {
    let rezult = prompt("Підтвердіть введіть (ok)");
    if (rezult === 'ok') sendMessage(SET_RESET_FUNCTION, 'resetFunction');
}
//Добавляємо для кожного input і label id


let arrayClass = [
  //   {
  //   labelData: '.rele__seting-switch__label',
  //   inputData: `.${CLASS_RELAY_SETTING_SWITCH_INPUT}`,
  //   nameData: 'seting-'
  // },
  {
    labelData: '.label-day',
    inputData: '.day',
    nameData: 'time-id-'
  },
  {
    labelData: '.input-control-error__label',
    inputData: '.input-control-error',
    nameData: 'err_on_'
  },
  {
    labelData: '.rele-temp-change__label',
    inputData: CLASS_RELAY_CONTROL_CHANGE_RADIO,
    nameData: 'on_'
  },
  {
    labelData: '.rele__seting-sensor__select-label',
    inputData: '.rele__seting-sensor__select',
    nameData: 'cars'
  },
  {
    labelData: '.rele-temp-vkl-start-label',
    inputData: CLASS_RELAY_TEMP_ON,
    nameData: 'temp_start_'
  },
  {
    labelData: '.rele-temp-vkl-end-label',
    inputData: CLASS_RELAY_TEMP_OFF,
    nameData: 'temp_end_'
  },
  {
    labelData: '.rele-temp-change-single__label',
    inputData: CLASS_RELAY_TEMP_CHANGE_SINGLE,
    nameData: 'one_range_'
  },
  {
    labelData: '.rele__timer-seting-show__label',
    inputData: `.${CLASS_RELAY_TIMER_SETTING_SHOW_INPUT}`,
    nameData: 'show-time_'
  }
];

const addIdAndFor = () => {
  return new Promise(resolve => {
    arrayClass.forEach(e => {
      let L = document.querySelectorAll(e.labelData);
      let I = document.querySelectorAll(e.inputData);
      if (L && I) setIdAndFor(L, I, e.nameData);
    });
    console.log('start function addIdAndFor()')
    resolve();
  })
}

function setIdAndFor(classLabel, classInput, nameId) {
  classInput.forEach((e, i) => {
    if (classLabel[i] && e) {
      e.setAttribute('id', (nameId + i));
      classLabel[i].setAttribute('for', ((nameId + i)));
    }
    // console.log(classLabel[i])
  });
}




const btnPoppaAddNewDeviceOpen = document.querySelector('.popup-menu__btn-local-storage');
const POPUP_LOCAL_STORAGE = document.querySelector('.popup-local-storage')
btnPoppaAddNewDeviceOpen.addEventListener('click', () => {
  POPUP_LOCAL_STORAGE.classList.remove('popup-local-storage__show');
});

document.querySelector('.popup-local-storage__top-list').addEventListener('click', selectItem)
document.querySelector('.popup-local-storage__btn-add').addEventListener('click', addDevice)
document.querySelector('.popup-local-storage__btn-remove').addEventListener('click', removeDevice)
document.querySelector('.popup-local-storage__btn-close').addEventListener('click', closeForm)


if (localStorage.getItem('DeviceList') != null) {
  const devicesList = JSON.parse(localStorage.getItem('DeviceList'));
  if (devicesList) {
    POPUP_LOCAL_STORAGE.classList.remove('popup-local-storage__show');
  }
  removeList();
  printListDevice(devicesList);
}




//Select language
const startLocalStorage = () => {
  return new Promise(resolve => {
    const language = localStorage.getItem('Language');
    if (language) {
      if (language == 'ua' || language == 'en' || language == 'cz') {
        languageChange(language); //langugage  write in localStrarage 
      }
    } else {
      languageChange('ua'); //default language
    }
    console.log('start function startLocalStorage()');
    resolve();
  })

}

function selectItem(event) {
  event.preventDefault();
  const dev = event.target.closest('.popup-local-storage__top-item').querySelector('.popup-local-storage__top-device').innerText;
  const nam = event.target.closest('.popup-local-storage__top-item').querySelector('.popup-local-storage__top-name').innerText;
  if (dev != 'Name Device' || nam != 'Name') {
    event.target.closest('.popup-local-storage__top-item').classList.toggle('click');
  }

}






function removeDevice(event) { //удаляємо видалені пристрої
  event.preventDefault();
  let deviceList = [];
  const itemDeviceElement = document.querySelectorAll('.popup-local-storage__top-item');
  if (localStorage.getItem('DeviceList') != null || itemDevice.length > 0) { //якщо в LOCALSTORAGE  є щось записано і є списки на екрані 
    deviceList = JSON.parse(localStorage.getItem('DeviceList'));

    const newDeviceList = [];
    let isClick = false;
    itemDeviceElement.forEach((element, i) => {
      if (i > 0) {
        if (element.classList.contains('click')) {
          isClick = true;
          const deleteDevice = element.querySelector('.popup-local-storage__top-device').innerText;
          deviceList.forEach((device) => {
            if (device != null && device.NameDevice != deleteDevice) {
              newDeviceList.push(device);
            }
          });
        }
      }
    });
    if (isClick == true) {
      localStorage.setItem('DeviceList', JSON.stringify(newDeviceList));
      removeList();
      printListDevice(newDeviceList);
    }

  } else return false;
}

function closeForm(event) {
  event.preventDefault();
  POPUP_LOCAL_STORAGE.classList.remove('popup-local-storage__show');
}

function addDevice(event) {
  event.preventDefault();
  let deviceList = [];
  const obj = {};

  const form = document.querySelector('.popup-local-storage__form');
  const nameDevice = form.device.value;
  const name = form.name.value;
  let validateMessage;
  if (localStorage.getItem('DeviceList') != null) {
    deviceList = JSON.parse(localStorage.getItem('DeviceList'));
  }

  if ((nameDevice == '' || name == '') && (nameDevice != 'Name Device' || name == 'Name'))
    validateMessage = 'Заповніть всі поля';
  else if (deviceList != '') {
    deviceList.forEach(e => {
      if (e.NameDevice === nameDevice) {
        validateMessage = 'Такий пристрій вже є';
      }
    })
  }

  if (validateMessage != undefined) {
    alert(validateMessage);
    return;
  }

  obj.NameDevice = nameDevice;
  obj.Name = name;
  deviceList.push(obj);
  localStorage.setItem('DeviceList', JSON.stringify(deviceList));
  removeList();
  printListDevice(deviceList);
}

function removeList() {
  const items = document.querySelectorAll('.popup-local-storage__top-item, .popup-local-storage-menu__item')
  items.forEach((item, i) => {
    if (i > 0) item.remove();
  })
}

function printListDevice(deviceList = []) {
  //******************************************** */  
  deviceList.forEach((device) => {
    if (device != null) {
      const ul = document.querySelector('.popup-local-storage__top-list');
      const ulMenu = document.querySelector('.popup-local-storage-menu__list');
      let li = document.createElement('li');
      let p = document.createElement('p');
      let p1 = document.createElement('p');

      li.className = 'popup-local-storage__top-item';

      p.className = 'popup-local-storage__top-device';
      p.innerText = device.NameDevice;

      p1.className = 'popup-local-storage__top-name';
      p1.innerText = device.Name;

      li.append(p);
      li.append(p1);

      ul.append(li);

      let liMenu = document.createElement('li');
      let pMenu = document.createElement('p');
      let p1Menu = document.createElement('p');

      liMenu.className = 'popup-local-storage-menu__item';

      pMenu.className = 'popup-local-storage-menu__device';
      pMenu.innerText = device.NameDevice;

      p1Menu.className = 'popup-local-storage-menu__name';
      p1Menu.innerText = device.Name;

      liMenu.append(pMenu);

      liMenu.append(p1Menu);
      ulMenu.append(liMenu);
    }
  });

  //******************************************** */
}
const langArr = {
    "dey_monday": {
        "ua": 'ПО',
        "en": 'MO',
        "cz": 'PO',
    },
    "dey_tuesday": {
        "ua": 'ВІ',
        "en": 'TU',
        "cz": 'ÚT',
    },
    "dey_wednesday": {
        "ua": 'СЕ',
        "en": 'WE',
        "cz": 'ST',
    },
    "dey_thursday": {
        "ua": 'ЧЕ',
        "en": 'TH',
        "cz": 'ČT',
    },
    "dey_friday": {
        "ua": 'ПЯ',
        "en": 'FR',
        "cz": 'PA',
    },
    "dey_saturday": {
        "ua": 'СУ',
        "en": 'SA',
        "cz": 'SO',
    },
    "dey_sunday": {
        "ua": 'НЕ',
        "en": 'SU',
        "cz": 'NE',
    },
    "error_title": { //
        "ua": 'При несправності термодатчика  або таймера   реле залишаємо',
        "en": 'If the temperature sensor or timer malfunctions, leave the relay',
        "cz": 'Pokud dojde k poruše teplotního čidla nebo časovače, opusťte relé',
    },
    "on": { //
        "ua": 'вкл',
        "en": 'on',
        "cz": 'zapnut',
    },
    "off": { //
        "ua": 'відкл',
        "en": 'off',
        "cz": 'vypnut',
    },
    "change_on_off_rele": { //
        "ua": ' При спрацюванні термодатчика  або таймера включаємо або виключаємо реле',
        "en": ' When the temperature sensor or timer is activated, turn the relay on or off',
        "cz": 'Když je aktivován teplotní senzor nebo časovač, zapněte nebo vypněte relé',
    },
    "control_termo": { //
        "ua": ' Управління термодатчиком',
        "en": 'Temperature sensor control',
        "cz": 'Ovládání teplotním čidlem'
    },
    "show-sensor-setting": { //
        "ua": 'Показати настройки термо датчиків',
        "en": 'Show thermal sensor settings',
        "cz": 'Zobrazit nastavení teplotních senzorů'
    },
    "manual_control": { //
        "ua": 'Ручне управління',
        "en": 'Manual control',
        "cz": 'Ruční ovládání'
    },
    "select_sensor": { //
        "ua": 'Виберіть термодатчик',
        "en": 'Select the temperature sensor',
        "cz": 'Vyberte teplotní senzor'
    },
    "one_range ": { //
        "ua": 'Один  діапазон',
        "en": 'One range',
        "cz": 'Jeden rozsah',
    },
    "two_range ": { //
        "ua": 'Два   діапазони',
        "en": 'Two ranges',
        "cz": 'Dva rozsahy',
    },
    "temp_on": { //
        "ua": 'Темп вкл',
        "en": 'Temp ON',
        "cz": 'Tepl ZAP',
    },
    "temp_off": { //
        "ua": 'Темп відк',
        "en": 'Temp OFF',
        "cz": 'Tepl VYP',
    },
    "list-device": { //
        "ua": 'Список пристроїв',
        "en": 'List of devices',
        "cz": 'Seznam zařízení',
    },
    "list_eeprom": { //
        "ua": 'Дані з вихідних датчиків EEPROM',
        "en": 'Data from EEPROM out sensors',
        "cz": 'Data z výstupních senzorů EEPROM',
    },
    "valid_sensors": { //
        "ua": 'Номери та адреси діючих датчиків',
        "en": 'Numbers and addresses of valid sensors',
        "cz": 'Čísla a adresy platných senzorů',
    },




}

// languageChange('ua');

function languageChange(language) {
    for (let key in langArr) {
        let elem = document.querySelectorAll('.lan-' + key);
        elem.forEach(e => {
            e.innerHTML = langArr[key][language];
            // console.log('language = ' + langArr[key][language]);
        });
    }
}


document.querySelector('.popup-menu__btn-ua ').addEventListener('click', () => {
    // console.log('UAUAUA');
    localStorage.setItem('Language', 'ua');
    languageChange('ua');

});

document.querySelector('.popup-menu__btn-en').addEventListener('click', () => {
    // console.log('ENENENE');
    languageChange('en');
    localStorage.setItem('Language', 'en');

});

document.querySelector('.popup-menu__btn-cz').addEventListener('click', () => {
    // console.log('CZCZCZS');
    localStorage.setItem('Language', 'cz');
    languageChange('cz');
});



function updateRelaySettings() {

    if (typeof sensorEepromControl?.obj === 'object' && sensorEepromControl?.obj !== undefined) {
        // Якщо об'єкт не порожній
        relayItem.forEach(function (relayElement, relayIndex) {

            const sensorSelect = relayElement.querySelector('select');
            const tempRangeRadios = relayElement.querySelectorAll(CLASS_RELAY_CONTROL_CHANGE_RADIO);
            const tempSingleRangeRadios = relayElement.querySelectorAll(CLASS_RELAY_TEMP_CHANGE_SINGLE);
            const relayErrorIndicators = relayElement.querySelectorAll('.input-control-error');

            let relaySensorData = sensorEepromControl.obj[relayIndex].number;
            const sensorNumber = relaySensorData & 0x0F; // номер сенсора, який керує реле

            // Налаштування діапазонів температур
            if (tempSingleRangeRadios !== null) {
                if (relaySensorData & (1 << 4)) {
                    // Два діапазони температур: включення і відключення
                    tempSingleRangeRadios[1].checked = true;
                    relayElement.closest(CLASS_RELAY_ITEM).querySelector(CLASS_RELAY_TEMP_OFF).disabled = false;
                } else {
                    // Один діапазон температур
                    relayElement.closest(CLASS_RELAY_ITEM).querySelector(CLASS_RELAY_TEMP_OFF).disabled = true;
                    tempSingleRangeRadios[0].checked = true;
                }
            }

            // Налаштування радіо перемикачів
            if (tempRangeRadios !== null) {
                if (relaySensorData & (1 << 5)) {
                    // Увімкнення або вимкнення реле при переключенні
                    tempRangeRadios[0].checked = true;
                } else {
                    tempRangeRadios[1].checked = true;
                }
            }

            // Перевірка на помилки реле
            if (relayErrorIndicators !== null) {
                if (relaySensorData & (1 << 6)) {
                    relayErrorIndicators[0].checked = true;
                } else {
                    relayErrorIndicators[1].checked = true;
                }
            }

            //------------------------------------

            const sensorOptions = sensorSelect.querySelectorAll('option');

            // Видалення всіх опцій, крім першої
            sensorOptions.forEach(function (option, index) {
                if (index > 0) option.remove();
            });

            for (let eepromSensorIndex = 0; eepromSensorIndex < 8; eepromSensorIndex++) {
                let relayWithSensor = 15;

                // Пошук реле, в якому зберігається сенсор
                for (let i = 0; i < 8; i++) {
                    let sensorData = sensorEepromControl.obj[i].number;
                    sensorData &= ~240;
                    if (sensorData === eepromSensorIndex) {
                        relayWithSensor = i;
                        console.log('relayWithSensor - ' + relayWithSensor);
                        break;
                    }
                }

                // Додавання опцій для сенсора
                if (typeof eepromData === 'object' && eepromData.obj !== undefined) {
                    if (!(eepromData.obj[eepromSensorIndex].address === '0000000000000000' || eepromData.obj[eepromSensorIndex].address === 'ffffffffffffffff') && (relayWithSensor === relayIndex || relayWithSensor === 15)) {
                        const createOption = document.createElement('option');
                        createOption.value = eepromData.obj[eepromSensorIndex].number;
                        createOption.className = "rele-control-option";

                        if (sensorNames.obj !== undefined && sensorNames.obj[eepromSensorIndex].nameSensor !== '') {
                            createOption.innerText = eepromData.obj[eepromSensorIndex].number + '--' + sensorNames.obj[eepromSensorIndex].nameSensor + ' -- ' + eepromData.obj[eepromSensorIndex].temp;
                        } else {
                            createOption.innerText = eepromData.obj[eepromSensorIndex].number + '--' + eepromData.obj[eepromSensorIndex].address.toLocaleUpperCase() + ' -- ' + eepromData.obj[eepromSensorIndex].temp;
                        }

                        if (relayWithSensor === relayIndex) {
                            createOption.selected = true;
                        }
                        sensorSelect.appendChild(createOption);
                    }

                    try {
                        if (sensorNumber !== 15) {
                            if (sensorNames.obj !== undefined && sensorNames.obj[sensorNumber].nameSensor !== '') {
                                if (sensorNumber < 8) relayElement.querySelector('.rele__seting-switch__sensor').innerText = sensorNames.obj[sensorNumber].nameSensor + '  ' + eepromData.obj[sensorNumber].temp;
                                else relayElement.querySelector('.rele__seting-switch__sensor').innerText = 'NONE';
                            } else {
                                if (sensorNumber < 8) relayElement.querySelector('.rele__seting-switch__sensor').innerText = eepromData.obj[sensorNumber].address.toLocaleUpperCase() + '  ' + eepromData.obj[sensorNumber].temp;
                                else relayElement.querySelector('.rele__seting-switch__sensor').innerText = 'NONE';
                            }
                        } else {
                            relayElement.querySelector('.rele__seting-switch__sensor').innerText = 'NONE';
                        }
                    } catch (error) {
                        console.log('ERROR sensorNumber  -- ' + sensorNumber);
                    }

                }

            }

        });
    }
}


function updateRelayTemperatureSettings() {
    const tempOnInputs = document.querySelectorAll(CLASS_RELAY_TEMP_ON);
    const tempOffInputs = document.querySelectorAll(CLASS_RELAY_TEMP_OFF);
    const tempOnSwitches = document.querySelectorAll('.rele__seting-switch__temp-on');
    const tempOffSwitches = document.querySelectorAll('.rele__seting-switch__temp-off');

    try {
        for (let i = 0; i < tempOnInputs.length; i++) {
            if (tempOnSwitches) tempOnSwitches[i].innerText = 'TEMP_ON  ' + sensorOpenCloseTemperature.obj[i].vkl;
            if (tempOffSwitches) tempOffSwitches[i].innerText = 'TEMP_OFF  ' + sensorOpenCloseTemperature.obj[i].otkl;
            tempOnInputs[i].value = sensorOpenCloseTemperature.obj[i].vkl;
            tempOffInputs[i].value = sensorOpenCloseTemperature.obj[i].otkl;
        }
    } catch (error) {
        console.log('ERROR  ' + error);
    }
}



function updateClickableDevices() {
    let isEepromActive = false;

    // Перевіряємо, чи є клас "active" серед елементів EEPROM
    parentListEeprom.forEach(function (eepromElement) {
        if (eepromElement.classList.contains(CLASS_ACTIVE)) {
            isEepromActive = true;
        }
    });

    if (isEepromActive) {
        // Робимо клікабельними ті пристрої, яких немає у списку (з класом "red")
        parentListDevice.forEach(function (deviceElement, index) {
            if (index > 0 && deviceElement.classList.contains('red')) {
                deviceElement.classList.add('click');
            }
        });
    } else {
        // Якщо немає активних елементів, знімаємо клас "click"
        parentListDevice.forEach(function (deviceElement, index) {
            if (index > 0) {
                deviceElement.classList.remove('click');
            }
        });
    }
}

function highlightMismatchedSensorAddresses() {
    for (let deviceIndex = 1; deviceIndex < deviceData.obj.length + 1; deviceIndex++) {
        // Додаємо клас "red" для позначення пристроїв, чий адрес не знайдено
        tableDeviceAddress[deviceIndex].closest('.address-device__data').classList.add('red');

        for (let eepromIndex = 1; eepromIndex < 9; eepromIndex++) {
            // Якщо адрес пристрою співпадає з адресом у EEPROM
            if (tableDeviceAddress[deviceIndex].textContent === tableEepromAddress[eepromIndex].textContent) {
                // Видаляємо класи "red" і "click" для елементів, що знайшли відповідний адрес
                tableDeviceAddress[deviceIndex].closest('.address-device__data').classList.remove('red');
                tableDeviceAddress[deviceIndex].closest('.address-device__data').classList.remove('click');
                break;
            }
        }
    }
    // Викликаємо функцію для перевірки стану пристроїв
    updateClickableDevices();
}














function showSectionTime(event, parent) {
    if (event.target.classList.contains('on')) {
        parent.querySelector(CLASS__RELAY_TIMERsETTING_SVG).classList.add('rele__timer-seting-svg-on');
        parent.querySelector(CLASS_RELAY_CONTROL_TIMER).classList.add('block__show'); //Добавляємо клас
        event.target.classList.remove('on');
    } else {
        parent.querySelector(CLASS__RELAY_TIMERsETTING_SVG).classList.remove('rele__timer-seting-svg-on');
        parent.querySelector(CLASS_RELAY_CONTROL_TIMER).classList.remove('block__show');
        event.target.classList.add('on');
    }
}

function showTimerIcons(parent, datetime, time) {
    const timerIcons = parent.querySelectorAll('.rele__timer-seting-icon');
    for (let d = 0, t = 0; d < 10; d += 2, t += 10) {
        const datetimeValue = new Date(datetime[d].value).getTime();
        const timeValue = time[t].value;
        if (d == 0) {
            if (!Number.isNaN(datetimeValue) || timeValue != '') timerIcons[0].classList.add('show-block');
            else timerIcons[0].classList.remove('show-block');
        }
        if (d == 2) {
            if (!Number.isNaN(datetimeValue) || timeValue != '') timerIcons[1].classList.add('show-block');
            else timerIcons[1].classList.remove('show-block');
        }
        if (d == 4) {
            if (!Number.isNaN(datetimeValue) || timeValue != '') timerIcons[2].classList.add('show-block');
            else timerIcons[2].classList.remove('show-block');
        }
        if (d == 6) {
            if (!Number.isNaN(datetimeValue) || timeValue != '') timerIcons[3].classList.add('show-block');
            else timerIcons[3].classList.remove('show-block');
        }
        if (d == 8) {
            if (!Number.isNaN(datetimeValue) || timeValue != '') timerIcons[4].classList.add('show-block');
            else timerIcons[4].classList.remove('show-block');
        }
    }
}

function showSectionTimeAndSeting(event, parent, classLink, classShowSection, num) { //Покузує або скриває блок з настройками
    event.preventDefault();
    if (event.target.classList.contains('on')) {
        parent.querySelector(classLink).classList.remove(classLink.substring(1) + '-on');
        parent.querySelector(classShowSection).classList.remove('show-block');
        if (event.target.classList.contains(CLASS_RELAY_CONTROL_MANUAL_SHOW)) {
            parent.querySelector(CLASS_RELAY_SETTING_SENSOR_TIMER).classList.remove('block__hidden'); //Добавляємо клас відкриваємо Select
            const s = num + 'x0k';
            console.log('s----' + s);
            sendMessage(SET_RELAY_EEPROM_CONTROL_MANUAL, s);
        }
        event.target.classList.remove('on');
    } else {
        parent.querySelector(classLink).classList.add(classLink.substring(1) + '-on');
        parent.querySelector(classShowSection).classList.add('show-block');
        if (event.target.classList.contains(CLASS_RELAY_CONTROL_MANUAL_SHOW)) {
            parent.querySelector(CLASS_RELAY_SETTING_SENSOR_TIMER).classList.add('block__hidden'); //Добавляємо клас відкриваємо Select
            const s = num + 'x1k';
            console.log('s----' + s);
            sendMessage(SET_RELAY_EEPROM_CONTROL_MANUAL, s);
        }
        event.target.classList.add('on');
    }
}

//не використовується unused
function switchSeting(event, parent) { //Покузує або скриває блок з настройками
    console.log('testtest')
    if (event.target.classList.contains('on')) {
        parent.querySelector(CLASS_RELAY_SETTING_SVG).classList.add('rele__seting-svg-on');
        parent.querySelector(CLASS_RELAY_SECTION_SETTING).classList.add('show-block');
        event.target.classList.remove('on');
    } else {
        parent.querySelector(CLASS_RELAY_SETTING_SVG).classList.remove('rele__seting-svg-on');
        parent.querySelector(CLASS_RELAY_SECTION_SETTING).classList.remove('show-block');
        event.target.classList.add('on');
    }
}
// function isEmpty(obj) {
//     //Провірка на пусті обєкти 
//     for (let key in obj) {
//         return false;
//     }
//     return true;
// }

function isEmpty(obj) {
    // Перевіряємо чи це об'єкт і чи не null
    if (obj && typeof obj === 'object' && !Array.isArray(obj)) {
        return Object.keys(obj).length === 0;
    }
    return false;  // Якщо це не об'єкт або null, то це не порожній об'єкт
}


function addBeforeNullNUmber(number) {
    if (number > 9) return number;
    else return '0' + number;
}


function checkCheckedDay(event) { //Включає виключає дні тижня
    event.target.previousElementSibling.classList.toggle('checked');
    if (event.target.checked) {
        event.target.previousElementSibling.classList.add('checked');
    } else {
        event.target.previousElementSibling.classList.remove('checked');
    }
}

// ********************************************************************************************************************************************************************

// function checkDate(parent, dateTimeInputs, timeInputs) {
//     const relayIndex = parent.getAttribute('data-rele');
//     const timerBlocks = parent.querySelectorAll('.timer-date__item');

//     dateTimeInputs.forEach((dateInput, index) => {
//         const parsedDate = new Date(dateInput.value).getTime();
//         updateDateTimeArray(relayIndex, index, parsedDate, dateInput.value);
//         handleTimeFormatting(dateTimeInputs, timeInputs, relayIndex, index);

//         validateDateRanges(dateTimeInputs, relayIndex);
//         toggleTimerBlockVisibility(timerBlocks, dateTimeInputs);
//     });
// }

// //Функція для оновлення масиву dateTimeArray
// function updateDateTimeArray(relayIndex, index, parsedDate, dateValue) {
//     dateTimeArray[relayIndex].dateTimeList[index] = parsedDate; // У секундах
//     dateTimeArray[relayIndex].dateTimeRealList[index] = new Date(dateValue); // У нормальному форматі
// }

// //Функція для форматування часу
// function handleTimeFormatting(dateTimeInputs, timeInputs, relayIndex, index) {
//     const isEvenIndex = index % 2 === 0;
//     const timeValue = isEvenIndex ? timeInputs[index * 5].value : timeInputs[(index - 1) * 5].value;

//     if (timeValue !== '' && dateTimeArray[relayIndex].dateTimeRealList[index] != 'Invalid Date') {
//         const formattedDate = formatDataAndTime(dateTimeArray[relayIndex].dateTimeRealList[index], isEvenIndex ? 'start' : 'end');
//         dateTimeInputs[index].value = formattedDate;

//         if (formattedDate != 'Invalid Date') {
//             dateTimeArray[relayIndex].dateTimeRealList[index] = new Date(formattedDate);
//         }
//     }
// }

// //Функція для валідації діапазонів дати
// function validateDateRanges(dateTimeInputs, relayIndex) {
//     for (let i = 0; i < 9; i += 2) {
//         const startTime = dateTimeArray[relayIndex].dateTimeList[i];
//         const endTime = dateTimeArray[relayIndex].dateTimeList[i + 1];

//         if (startTime >= endTime && endTime !== '') {
//             markAsInvalid(dateTimeInputs, i, 'date-red__color');
//         } else {
//             removeInvalidMark(dateTimeInputs, i, 'date-red__color');
//         }

//         if (isIncompleteDateRange(dateTimeInputs, i)) {
//             markAsIncomplete(dateTimeInputs, i, 'date-blue__backround');
//         } else {
//             removeInvalidMark(dateTimeInputs, i, 'date-blue__backround');
//         }
//     }
// }


// //Функція для перевірки на незаповнені поля
// function isIncompleteDateRange(dateTimeInputs, index) {
//     return (dateTimeInputs[index].value === '' && dateTimeInputs[index + 1].value !== '') ||
//         (dateTimeInputs[index].value !== '' && dateTimeInputs[index + 1].value === '');
// }


// //Функції для роботи з класами помилок
// function markAsInvalid(dateTimeInputs, index, className) {
//     dateTimeInputs[index].classList.add(className);
//     dateTimeInputs[index + 1].classList.add(className);
// }

// function removeInvalidMark(dateTimeInputs, index, className) {
//     dateTimeInputs[index].classList.remove(className);
//     dateTimeInputs[index + 1].classList.remove(className);
// }

// function markAsIncomplete(dateTimeInputs, index, className) {
//     if (dateTimeInputs[index].value === '') dateTimeInputs[index].classList.add(className);
//     else dateTimeInputs[index + 1].classList.add(className);
// }

// //Функція для оновлення видимості блоків таймера
// function toggleTimerBlockVisibility(timerBlocks, dateTimeInputs) {
//     for (let i = 0, blockIndex = 1; i < 7; i += 2, blockIndex++) {
//         const isValid = dateTimeInputs[i].value !== '' && dateTimeInputs[i + 1].value !== '' &&
//             !dateTimeInputs[i].classList.contains('date-red__color');

//         if (isValid) {
//             timerBlocks[blockIndex].classList.add('date-show-block');
//         } else {
//             timerBlocks[blockIndex].classList.remove('date-show-block');
//         }
//     }
// }































function checkDate(parent, dateTime, time) {
    //обробка дати 
    const numberRelayClick = parent.getAttribute('data-rele');
    const timerBlock = parent.querySelectorAll('.timer-date__item');

    dateTime.forEach(function (k, i) {
        let dateInput = new Date(k.value).getTime();
        dateTimeArray[numberRelayClick].dateTimeList[i] = dateInput; //В секундах
        dateTimeArray[numberRelayClick].dateTimeRealList[i] = new Date(k.value); //нермальний формат

        if (dateTimeArray[numberRelayClick].dateTimeRealList[i] != 'Invalid Date') { //Якщо введена дата
            if (i % 2 == 0) {
                //neparnyy element
                if (time[i * 5].value != '') { //Якщо введений час
                    dateTime[i].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i], 'start'); //Міняємо в даті годину на 00:00
                    if (dateTime[i].value != 'Invalid Date') dateTimeArray[numberRelayClick].dateTimeRealList[i] = new Date(dateTime[i].value); //записуємо в елемент datatime
                }
            } else {
                //parnyy elemen
                if (time[(i - 1) * 5].value != '') {
                    dateTime[i].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i], 'end'); //Міняємо в даті годину на 23:59
                    if (dateTime[i].value != 'Invalid Date') dateTimeArray[numberRelayClick].dateTimeRealList[i] = new Date(dateTime[i].value); //записуємо в елемент datatime
                }
            }
        }


        for (let _n2 = 0; _n2 < 9; _n2 += 2) {
            if (dateTimeArray[numberRelayClick].dateTimeList[_n2] >= dateTimeArray[numberRelayClick].dateTimeList[_n2 + 1]) {
                //Якщо в одному рядку друга дата менша або дорівнює першій
                dateTime[_n2].classList.add('date-red__color');
                dateTime[_n2 + 1].classList.add('date-red__color');
            } else {
                dateTime[_n2].classList.remove('date-red__color');
                dateTime[_n2 + 1].classList.remove('date-red__color');
            }

            if (dateTime[_n2].value == '' && dateTime[_n2 + 1].value !== '' || dateTime[_n2].value !== '' && dateTime[_n2 + 1].value == '') {
                //Якщо в рядку незаповнене одне з полів
                if (dateTime[_n2].value == '') dateTime[_n2].classList.add('date-blue__backround');
                else dateTime[_n2 + 1].classList.add('date-blue__backround');
            } else {
                dateTime[_n2].classList.remove('date-blue__backround');
                dateTime[_n2 + 1].classList.remove('date-blue__backround');
            }

            for (let _n3 = 0, _nn = 1; _n3 < 7; _n3 += 2, _nn++) {
                // n= [0 1 2 3 4 5 6 7 ]    nn = [1 3 ]
                if (dateTime[_n3].value != '' && dateTime[_n3 + 1].value != '' && !dateTime[_n3].classList.contains('date-red__color')) {
                    //Для розблокіровки для дальших блоків
                    timerBlock[_nn].classList.add('date-show-block');
                } else {
                    timerBlock[_nn].classList.remove('date-show-block');
                }
            }
        }
    });
}


// ********************************************************************************************************************************************************************

// function checkDataAndTime(dateTime, time, numberRelayClick){  // Якщо є вибрано поля дата і поля час то поле дата годину старт ставимо 00:00 а кінець 23:59
//   dateTime.forEach(function (k, i) {
//     if (dateTimeArray[numberRelayClick].dateTimeRealList[i]  != 'Invalid Date') {//Якщо введена дата
//       console.log('************  '+numberRelayClick+'  ****************  '+i+'  *********')
//       console.log(dateTimeArray[numberRelayClick].dateTimeRealList[i] )
//       console.log(time[i * 5].value)
//       if (i % 2 == 0) {
//         //neparnyy element
//         if (time[i * 5].value != '') {//Якщо введений час
//           dateTime[i].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i] , 'start');//Міняємо в даті годину на 00:00
//           if (dateTime[i].value != 'Invalid Date') dateTimeArray[numberRelayClick].dateTimeRealList[i] = new Date(dateTime[i].value);//записуємо в елемент datatime
//         }
//       } else {
//        //parnyy elemen
//         if (time[(i-1) * 5].value != '') {
//           console.log(formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i] , 'end'));
//           dateTime[i].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i] , 'end');//Міняємо в даті годину на 23:59
//           if (dateTime[i].value != 'Invalid Date') dateTimeArray[numberRelayClick].dateTimeRealList[i] = new Date(dateTime[i].value);//записуємо в елемент datatime
//         }
//       }
//     }
//   });
// }
// ********************************************************************************************************************************************************************


// function checkTime(parent, dateTime, time) {
//     const numberRelayClick = parent.getAttribute('data-rele');

//     processTimeInputs(parent, time, numberRelayClick);
//     updateDateTimeFields(dateTime, time, numberRelayClick);
//     updateTimerBlocks(parent, time);
// }


// //Функція для обробки часу і встановлення класів
// function processTimeInputs(parent, time, numberRelayClick) {
//     time.forEach(function (k, i) {
//         const t2 = getTimeFromInput(k.value);
//         updateTimeLists(numberRelayClick, i, t2);

//         processTimeRanges(parent, time, numberRelayClick);
//     });
// }

// //Функція для отримання часу з текстового поля
// function getTimeFromInput(str) {
//     let t2 = new Date(0);
//     if (str !== '') {
//         t2.setHours(str.substr(0, str.indexOf(':')), str.substr(str.indexOf(':') + 1));
//     }
//     return t2;
// }

// //Функція для оновлення списків часу     
// function updateTimeLists(numberRelayClick, index, t2) {
//     if (t2) {
//         dateTimeArray[numberRelayClick].timeRealList[index] = t2;
//         dateTimeArray[numberRelayClick].timeList[index] = t2.getTime();
//     } else {
//         dateTimeArray[numberRelayClick].timeRealList[index] = '';
//         dateTimeArray[numberRelayClick].timeList[index] = '';
//     }
// }

// //Функція для обробки діапазонів часу і перевірки помилок
// function processTimeRanges(parent, time, numberRelayClick) {
//     for (let _n4 = 0; _n4 < 49; _n4 += 2) {
//         if (dateTimeArray[numberRelayClick].timeList[_n4] >= dateTimeArray[numberRelayClick].timeList[_n4 + 1] && dateTimeArray[numberRelayClick].timeList[_n4 + 1] !== '') {
//             addErrorClass(time, _n4, 'time-red__color');
//         } else {
//             removeErrorClass(time, _n4, 'time-red__color');
//         }

//         if (isIncompleteTimeRange(time, _n4)) {
//             markIncompleteRange(time, _n4, 'time-blue__backround');
//         } else {
//             removeErrorClass(time, _n4, 'time-blue__backround');
//         }
//     }
// }


// //Допоміжні функції для роботи з класами
// function addErrorClass(time, index, className) {
//     time[index].classList.add(className);
//     time[index + 1].classList.add(className);
// }

// function removeErrorClass(time, index, className) {
//     time[index].classList.remove(className);
//     time[index + 1].classList.remove(className);
// }

// function isIncompleteTimeRange(time, index) {
//     return (time[index].value === '' && time[index + 1].value !== '') || (time[index].value !== '' && time[index + 1].value === '');
// }

// function markIncompleteRange(time, index, className) {
//     if (time[index].value === '') time[index].classList.add(className);
//     else time[index + 1].classList.add(className);
// }


// //Функція для оновлення полів дати/часу
// function updateDateTimeFields(dateTime, time, numberRelayClick) {
//     for (let i = 0; i < 49; i += 10) {
//         if (dateTimeArray[numberRelayClick].dateTimeRealList[i / 5] != 'Invalid Date' && time[i].value != '') {
//             dateTime[i / 5].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i / 5], 'start');
//             dateTimeArray[numberRelayClick].dateTimeRealList[i / 5] = new Date(dateTime[i / 5].value);
//         }

//         if (dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1] != 'Invalid Date' && time[i].value != '') {
//             dateTime[i / 5 + 1].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1], 'end');
//             dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1] = new Date(dateTime[i / 5 + 1].value);
//         }
//     }
// }


// //Функція для обробки блоків таймерів
// function updateTimerBlocks(parent, time) {
//     const timerBlock = parent.querySelectorAll('.timer-date__item');
//     const checkedDey = parent.querySelectorAll('.day');

//     for (let _u = 0; _u < 45; _u += 10) {
//         toggleTimeVisibility(time, _u);
//         toggleCheckedFields(time, _u, checkedDey, parent);
//     }
// }

// function toggleTimeVisibility(time, _u) {
//     for (let _n6 = _u; _n6 < _u + 9; _n6 += 2) {
//         if (time[_n6].value !== '' && time[_n6 + 1].value !== '') {
//             time[_n6 + 2].classList.remove('hiden-time');
//             time[_n6 + 3].classList.remove('hiden-time');
//         } else {
//             time[_n6 + 2].classList.add('hiden-time');
//             time[_n6 + 3].classList.add('hiden-time');
//         }
//     }
// }

// function toggleCheckedFields(time, _u, checkedDey, parent) {
//     if (time[_u].value !== '' && !time[_u].classList.contains('time-red__color')) {
//         for (let f = 0; f < 7; f++) {
//             // checkedDey[nnn + f].disabled = false;
//             // checkedDey[nnn + f].checked = true;
//         }
//     } else {
//         if (time[_u].value === '') {
//             for (let f = 0; f < 7; f++) {
//                 // checkedDey[nnn + f].disabled = true;
//             }
//         }
//     }
// }








































function checkTime(parent, dateTime, time) {
    //обробка часу
    const numberRelayClick = parent.getAttribute('data-rele');
    const timerBlock = parent.querySelectorAll('.timer-date__item');
    const checkedDey = parent.querySelectorAll('.day');

    time.forEach(function (k, i) {
        t2 = new Date(0);
        str = k.value;
        if (k.value != '') {
            t2.setHours(str.substr(0, str.indexOf(':')), str.substr(str.indexOf(':') + 1));
            dateTimeArray[numberRelayClick].timeRealList[i] = t2;
            t2 = t2.getTime();
            dateTimeArray[numberRelayClick].timeList[i] = t2;
        } else {
            dateTimeArray[numberRelayClick].timeRealList[i] = '';
            dateTimeArray[numberRelayClick].timeList[i] = '';
        }

        //   // ********************************************************************************************************************************************************************

        for (let _n4 = 0; _n4 < 49; _n4 += 2) {

            if (dateTimeArray[numberRelayClick].timeList[_n4] >= dateTimeArray[numberRelayClick].timeList[_n4 + 1] && dateTimeArray[numberRelayClick].timeList[_n4 + 1] !== '') {
                //Якщо в одному рядку друга дата менша або дорівнює першій
                time[_n4].classList.add('time-red__color');
                time[_n4 + 1].classList.add('time-red__color');
            } else {
                time[_n4].classList.remove('time-red__color');
                time[_n4 + 1].classList.remove('time-red__color');
            }

            if (time[_n4].value == '' && time[_n4 + 1].value !== '' || time[_n4].value !== '' && time[_n4 + 1].value == '') {
                //Якщо в рядку незаповнене одне з полів
                if (time[_n4].value == '') time[_n4].classList.add('time-blue__backround');
                else time[_n4 + 1].classList.add('time-blue__backround');
            } else {
                time[_n4].classList.remove('time-blue__backround');
                time[_n4 + 1].classList.remove('time-blue__backround');
            }
        }

        for (let u = 1; u < 49; u += 10) {

            for (let _n5 = u; _n5 < u + 8; _n5 += 2) {
                if (dateTimeArray[numberRelayClick].timeList[_n5] + 1 > dateTimeArray[numberRelayClick].timeList[_n5 + 1] && dateTimeArray[numberRelayClick].timeList[_n5 + 1] !== '') {
                    //Якщо  другий рядок є менший за перший рядок 
                    time[_n5].classList.add('time-red__backround');
                    time[_n5 + 1].classList.add('time-red__backround');
                } else {
                    time[_n5].classList.remove('time-red__backround');
                    time[_n5 + 1].classList.remove('time-red__backround');
                }
            }
        }

        if (i === 0 || i === 10 || i === 20 || i === 30 || i === 40) {
            if (dateTimeArray[numberRelayClick].dateTimeRealList[i / 5] != 'Invalid Date' && dateTimeArray[numberRelayClick].dateTimeRealList[i / 5] != undefined && time[i].value != '') {
                dateTime[i / 5].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i / 5], 'start');
                dateTimeArray[numberRelayClick].dateTimeRealList[i / 5] = new Date(dateTime[i / 5].value);
            }

            if (dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1] != 'Invalid Date' && dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1] != undefined && time[i].value != '') {
                dateTime[i / 5 + 1].value = formatDataAndTime(dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1], 'end');
                dateTimeArray[numberRelayClick].dateTimeRealList[i / 5 + 1] = new Date(dateTime[i / 5 + 1].value);
            }
        }


        for (let _u = 0, _nn2 = 1, nnn = 0; _u < 45; _u += 10, _nn2++, nnn += 7) {
            //u number section first element 0 10 20 30 40  nn вказує на номер секції 1 2 3 4 5


            for (let _n6 = _u; _n6 < _u + 9; _n6 += 2) {
                // n  перебираємо  парні  елементи в секції 0 2 4 6 8    10 12 14 16 18  20 22 24 26 28  30 32 34 36 38  40 42 44 46 48 
                if (_n6 < _u + 7)
                    if (time[_n6].value !== '' && time[_n6 + 1].value !== '') {
                        //Для розблокіровки для дальших рядків
                        time[_n6 + 2].classList.remove('hiden-time');
                        time[_n6 + 1 + 2].classList.remove('hiden-time');
                    } else {
                        time[_n6 + 2].classList.add('hiden-time');
                        time[_n6 + 1 + 2].classList.add('hiden-time');
                    }
            }

            if (_nn2 < 5) {
                if (time[_u + 8].value != '' && time[_u + 9].value != '') {
                    //Для розблокіровки для дальших блоків//розблокувати
                    if (!timerBlock[_nn2].classList.contains('date-show-block')) timerBlock[_nn2].classList.add('time-show-block');

                    // timerBlock[nn].classList.remove('time-show-block');
                } else {
                    timerBlock[_nn2].classList.remove('time-show-block');

                    // timerBlock[nn].classList.add('time-show-block');
                }
            }

            //   const error_class = parent.querySelectorAll('.time-red__color');
            // console.log('length error  ' + error_class.length);
            // if ((time[u].value != '' && !time[u].classList.contains('time-red__color')) ) { //Для розблокіровки сhecked element даного блоку


            if (time[_u].value != '' && !time[_u].classList.contains('time-red__color')) {
                // if (time[_u].value != '' && time[_u] === eve.currentTarget && !time[_u].classList.contains('time-red__color')) {

                //Для розблокіровки сhecked element даного блоку
                for (f = 0; f < 7; f++) {
                    // checkedDey[nnn + f].disabled = false;//ttt
                    // checkedDey[nnn + f].checked = true;//ttt
                }
            } else {
                if (time[_u].value == '')
                    for (f = 0; f < 7; f++) {
                        // checkedDey[nnn + f].disabled = true;//ttt
                    }
            }
        }
        //   // ********************************************************************************************************************************************************************

    });
}
//********************************************************************************************************************************************************************


function formatDataAndTime(date, typ) {

    let strDate = date.getFullYear() + '-';
    strDate += date.getMonth() < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
    strDate += '-';
    strDate += date.getDate() < 10 ? '0' + date.getDate() : date.getDate();

    if (typ == 'start') strDate += 'T00:00';
    else if ('end') strDate += 'T23:59';
    // console.log('strDatestrDatestrDate  ' + strDate);
    return strDate;
}

function formatDataAndTimeFull(date) {

    let strDate = date.getFullYear() + '-';
    strDate += date.getMonth() < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1;
    strDate += '-';
    strDate += date.getDate() < 10 ? '0' + date.getDate() : date.getDate();

    strDate += 'T';
    strDate += date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
    strDate += ':';
    strDate += date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();

    // console.log('strDatestrDatestrDate  ' + strDate);
    return strDate;
}


function messageDate(inter) {
    s = 'RELE' + inter + '-65535-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  4294967295-65535-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  99-99-99-99-99-99-99-99-99-99-\
  1-1-1-1-1-1-1-\
  1-1-1-1-1-1-1-\
  1-1-1-1-1-1-1-\
  1-1-1-1-1-1-1-\
  1-1-1-1-1-1-1-';
    console.log(s);

    sendMessage(SET_RELAY_DATA_TIME, s);

}


initDateTimeArray()

async function start() {
  try {
    // Оновлює HTML текст
    await innerHtmlText();

    // Додає атрибути ID та for
    await addIdAndFor();

    // Ініціалізує Local Storage
    await startLocalStorage();

    // Налаштовує селектори
    await startSelector();

    // Виконує всі інші функції
    await startAllFunctions();
  } catch (error) {
    // Обробка помилок
    console.error('Error during initialization:', error);
  }
}
start();

function startIntervals() {
    const checkEmptyDataInterval = setInterval(checkEmptyData, 15000);
    const refreshEepromDataInterval = setInterval(refreshEepromData, 10000);
    const updateDateTimeInterval = setInterval(updateDateTime, 1000);

    function checkEmptyData() {
        if (isEmpty(eepromData) || isEmpty(deviceData) || isEmpty(sensorEepromControl) || isEmpty(sensorOpenCloseTemperature)) {
            console.log('Є пусті об’єкти');
            sendMessage(OUT_START_DATA_SENSOR, 'ALL');
        } else {
            console.log('Немає пустих об’єктів');
        }
    }

    function refreshEepromData() {
        showEepromData = false;
        sendMessage(OUT_START_DATA_SENSOR, 'readAddressSensor');
    }

    function updateDateTime() {
        let date = new Date();
        let newDateFormat = date.getFullYear() + '-' +
            addBeforeNullNUmber(date.getMonth() + 1) + '-' +
            addBeforeNullNUmber(date.getDate()) + ' ' +
            addBeforeNullNUmber(date.getHours()) + ':' +
            addBeforeNullNUmber(date.getMinutes()) + ':' +
            addBeforeNullNUmber(date.getSeconds());
        document.querySelector('.popup-info__date-time').innerText = newDateFormat;
    }
}



function handleChangeSelect() {
    const SELECT_ELEMENTS = document.querySelectorAll('select');
    // const releItems = document.querySelectorAll(CLASS_RELAY_ITEM);

    if (SELECT_ELEMENTS.length > 0) {
        console.log('YES CLASSES select  ' + SELECT_ELEMENTS.length);

        SELECT_ELEMENTS.forEach((selectElement) => {
            selectElement.addEventListener('change', () => {
                const SELECTED_VALUE = selectElement.value;
                const PARENT_RELAY_ITEM = selectElement.closest(CLASS_RELAY_ITEM);

                // Знаходимо відповідний індекс реле
                relayItem.forEach((relayItem, index) => {
                    if (relayItem === PARENT_RELAY_ITEM) {
                        const INDEX_SELECTED_VALUE = `${index}x${SELECTED_VALUE}k`;
                        sendMessage(SET_RELAY_EEPROM_UPR, INDEX_SELECTED_VALUE);
                    }
                });
            });
        });

    } else {
        console.log('NOT CLASSES select');
    }
}

// if (document.querySelector('select')) {
//     const relayItem = document.querySelectorAll(CLASS_RELAY_ITEM);
//     console.log('YES CLASSES select  ' + document.querySelectorAll('select').length);
//     document.querySelectorAll('select').forEach(function (e) {
//         e.addEventListener('change', function (k) {
//             // console.log(e.selectedIndex);
//             relayItem.forEach(function (k, i) {
//                 if (k == e.closest(CLASS_RELAY_ITEM)) {
//                     // опреділяєм в якому блоці ми знаходимося тобто номер реле
//                     s = i + 'x' + e.querySelectorAll('option')[e.selectedIndex].value + 'k';
//                     sendMessage(SET_RELAY_EEPROM_UPR, s);
//                 }
//             });
//         });
//     });
// } else {
//     console.log('NOT CLASSES select');
// }



function handleManualControl() {
    const MANUAL_CONTROL = document.querySelectorAll(CLASS_RELAY_CONTROL_MANUAL_ON_OFF);
    if (MANUAL_CONTROL.length > 0) {
        MANUAL_CONTROL.forEach((control, index) => {
            control.addEventListener('click', () => {
                const STATUS_RELAY = control.checked ? `${index}x1k` : `${index}x0k`;
                control.checked = !control.checked;
                console.log(`s---- ${STATUS_RELAY}`);
                try {
                    sendMessage(SET_RELAY_ON_OFF, STATUS_RELAY);
                } catch (error) {
                    console.error('Error sending message:', error);
                }
            });
        });
    } else {
        console.log('No elements found with the class rele__control-manually-on-off');
    }
}

  // if (document.querySelector(CLASS_RELAY_CONTROL_MANUAL_ON_OFF)) {
  //   document.querySelectorAll(CLASS_RELAY_CONTROL_MANUAL_ON_OFF).forEach(function (e, i) {
  //     e.addEventListener('change', function () {
  //       if (e.checked) s = i + 'x1k';
  //       else s = i + 'x0k';
  //       console.log('s----' + s);
  //       sendMessage(SET_RELAY_ON_OFF, s);
  //     });
  //   });
  // } else {
  //   console.log('NOT CLASSES rele__control-manually-on-off');
  // }


function handleRelayTempOn() {
  const tempInputs = document.querySelectorAll(`${CLASS_RELAY_TEMP_ON}, ${CLASS_RELAY_TEMP_OFF}`);

  if (tempInputs.length > 0) {
    console.log('YES CLASSES rele-temp-otkl rele-temp-vkl ' + tempInputs.length);

    const clampValue = (value, min, max) => Math.min(Math.max(value, min), max);

    const handleInput = (event) => {
      let inputValue = parseFloat(event.target.value);

      // Перевірка, чи введене значення є числом
      if (!isNaN(inputValue)) {
        event.target.value = clampValue(inputValue, -50, 120);
      } else {
        event.target.value = ''; // Якщо значення не є числом, очищаємо поле
      }
    };

    tempInputs.forEach(input => {
      input.addEventListener('keyup', handleInput);
    });

  } else {
    console.log('NOT CLASSES rele-temp-otkl rele-temp-vkl');
  }


}
//handleRelayTempOn handleRelayTempOn


// if (document.querySelector('CLASS_RELAY_TEMP_OFF') && document.querySelector('CLASS_RELAY_TEMP_ON')) {
//   console.log('YES CLASSES rele-temp-otkl   rele-temp-vkl  ' + document.querySelectorAll('CLASS_RELAY_TEMP_ON, CLASS_RELAY_TEMP_OFF').length);
//   document.querySelectorAll('CLASS_RELAY_TEMP_ON, CLASS_RELAY_TEMP_OFF').forEach(function (e) {
//     e.addEventListener('keyup', function () { //при вводі даних перевірка на мінімальне і максимальне значення

//       if (e.value > 120) e.value = 120;
//       if (e.value < -50) e.value = -50;
//     });
//   });
// } else {
//   console.log('NOT CLASSES rele-temp-otkl   rele-temp-vkl');
// }
function handleShowTable() {
    const showTableCheckbox = document.querySelector('.show_table');
    const sensorContainer = document.querySelector('.sensor');

    if (showTableCheckbox && sensorContainer) {
        console.log('YES CLASSES show_table');

        showTableCheckbox.addEventListener('change', (e) => {
            sensorContainer.classList.toggle('sensor-show', e.target.checked);
        });

    } else {
        console.log('NO CLASSES show_table or sensor');
    }

}

  // if (document.querySelector('.show_table')) {
  //   console.log('YES CLASSES  show_table')
  //   document.querySelector('.show_table').addEventListener('change', function (e) {
  //     const sensorContainer = document.querySelector('.sensor');
  //     if (e.target.checked == true) sensorContainer.classList.add('sensor-show');
  //     else sensorContainer.classList.remove('sensor-show');
  //   });
  // } else {
  //   console.log('NO CLASSES  show_table')
  // }

function handleChangeTempOnOff() {
    const RELAY_TEMP_BUTTONS = document.querySelectorAll(CLASS_RELAY_TEMP_BTN);

    if (RELAY_TEMP_BUTTONS.length > 0) {
        console.log('YES CLASSES CLASS_RELAY_TEMP_BTN');

        RELAY_TEMP_BUTTONS.forEach(function (button, index) {
            button.addEventListener('click', function () {
                const PARENT_RELAY_ITEM = button.closest(CLASS_RELAY_ITEM);
                const RELAY_TEMP_ON = PARENT_RELAY_ITEM.querySelector(CLASS_RELAY_TEMP_ON);
                const RELAY_TEMP_OFF = PARENT_RELAY_ITEM.querySelector(`${CLASS_RELAY_TEMP_CHANGE} ${CLASS_RELAY_TEMP_OFF}`);

                // Перевірка наявності елементів та їх значень
                if (RELAY_TEMP_ON && RELAY_TEMP_OFF && RELAY_TEMP_ON.value !== '' && RELAY_TEMP_OFF.value !== '') {
                    const MESSAGE = `${index}v${RELAY_TEMP_ON.value}o${RELAY_TEMP_OFF.value}k`;
                    //sendMessage(OUT_SAVE_DATA_SENSOR_TEMP, MESSAGE);
                    console.log('Message sent: ', MESSAGE);
                } else {
                    console.log('Invalid temperature values');
                }
            });
        });

    } else {
        console.log('NOT CLASSES rele-temp-btn');
    }
}











// function handleChangeTempOnOff() {

//     if (document.querySelector(CLASS_RELAY_ITEM)) {
//         console.log('YES CLASSES rele-temp-btn');
//         document.querySelectorAll(CLASS_RELAY_ITEM).forEach(function (e, i) {
//             //
//             e.addEventListener('click', function () {
//                 s = i + 'v' + e.closest(CLASS_RELAY_ITEM).querySelector(CLASS_RELAY_TEMP_ON).value + 'o' + e.closest(CLASS_RELAY_TEMP_CHANGE).querySelector('.rele-temp-otkl').value + 'k';

//                 sendMessage(outSaveDataSensorTemp, s);
//                 console.log(s);
//             });
//         });
//     } else {
//         console.log('NOT CLASSES rele-temp-btn');
//     }
// }
function handleSaveNameRelay() {
    const releNameButtons = document.querySelectorAll(CLASS_RELAY_NAME_BTN);

    if (releNameButtons.length > 0) {
        console.log('Found CLASS_RELAY_NAME_BTN: ' + releNameButtons.length);

        releNameButtons.forEach(function (button, index) {
            button.addEventListener('click', function () {
                const parentRelayItem = button.closest(CLASS_RELAY_ITEM);
                const findRelayNameInput = parentRelayItem.querySelector('.rele__name-input');

                // Перевіряємо, чи існує поле вводу для імені
                if (findRelayNameInput && findRelayNameInput.value !== '') {
                    const message = `${index}*#*${findRelayNameInput.value}*&*`;
                    sendMessage(OUT_SAVE_RELAY_NAME, message);
                    console.log('Message sent: ', message);
                } else {
                    console.log('Name input is empty or missing');
                }
            });
        });
    } else {
        console.log('No CLASS_RELAY_NAME_BTN classes found');
    }
}




//     if (relayNameBtn > 0) {
//       console.log('NOT CLASSES CLASS_RELAY_NAME_BTN ' + relayNameBtn.length);
//       relayNameBtn.forEach(function (e, i) {
//         e.addEventListener('click', function () {
//           s = i + '*#*' + e.closest(CLASS_RELAY_ITEM).querySelector('.rele__name-input').value + '*&*';

//           sendMessage(OUT_SAVE_RELAY_NAME, s);
//           console.log(s);
//         });
//       });
//     } else {
//       console.log('NOT CLASSES CLASS_RELAY_NAME_BTN');
//     }

function handleInputControlError() {
    const INPUT_CONTROL_ERRORS = document.querySelectorAll('.input-control-error');

    if (INPUT_CONTROL_ERRORS.length > 0) {
        console.log('Found input-control-error elements: ' + INPUT_CONTROL_ERRORS.length);

        INPUT_CONTROL_ERRORS.forEach(function (inputElement, index) {
            inputElement.addEventListener('change', function () {
                try {
                    let sensorIndex = Math.trunc(index / 2);
                    let sensorObject = sensorEepromControl.obj[sensorIndex];

                    // Оновлюємо біт залежно від значення
                    if (inputElement.value == '0') {
                        sensorObject.number &= ~(1 << 6); // Вимикаємо біт
                    } else if (inputElement.value == '1') {
                        sensorObject.number |= 1 << 6; // Вмикаємо біт
                    }

                    // Формуємо та відправляємо повідомлення
                    const MESSAGE = `${sensorIndex}x${sensorObject.number}k`;
                    sendMessage(SET_RELAY_EEPROM_UPR_ERROR_RELAY_ON_OFF, MESSAGE);

                    console.log('Message sent: ', MESSAGE);
                } catch (error) {
                    console.error('Error handling input change: ', error);
                }
            });
        });
    } else {
        console.log('No input-control-error elements found');
    }
}


// // // При несправності термодатчика або таймера реле залишаємо вкл або викл
// if (document.querySelector('.input-control-error')) {
//   console.log('YES CLASSES rele-temp-otkl   rele-temp-vkl  ' + inputControlError.length);

//   inputControlError.forEach(function (e, i) {

//     e.addEventListener('change', function () {
//       try {
//         let ii = Math.trunc(i / 2);

//         if (e.value == '0') {
//           sensorEepromControl.obj[ii].number &= ~(1 << 6);
//         } else if (e.value == '1') {
//           sensorEepromControl.obj[ii].number |= 1 << 6;
//         }
//         s = ii + 'x' + sensorEepromControl.obj[ii].number + 'k';
//         sendMessage(SET_RELAY_EEPROM_UPR_ERROR_RELAY_ON_OFF, s);
//       } catch (e) {
//         console.log('ERROR  ' + e);
//       }
//     });
//   });
// } else {
//   console.log('NOT CLASSES input-control-error');
// }
function handleRelayTempChangeRadio() {
    const RELAY_TEMP_CHANGE_RADIO = document.querySelectorAll(CLASS_RELAY_CONTROL_CHANGE_RADIO);

    if (RELAY_TEMP_CHANGE_RADIO.length > 0) {
        RELAY_TEMP_CHANGE_RADIO.forEach(function (radioElement, index) {
            radioElement.addEventListener('change', function () {
                let sensorIndex = Math.trunc(index / 2);
                let sensorObject = sensorEepromControl.obj[sensorIndex];

                // Оновлюємо біт залежно від значення перемикача
                if (radioElement.value == '0') {
                    sensorObject.number &= ~(1 << 5); // Вимикаємо 5-й біт
                } else if (radioElement.value == '1') {
                    sensorObject.number |= 1 << 5; // Вмикаємо 5-й біт
                }

                // Формуємо повідомлення
                const MESSAGE = `${sensorIndex}x${sensorObject.number}k`;
                console.log('Sending message: SET_RELAY_EEPROM_UPR_CHANGE_ON_OR_OFF - ' + MESSAGE);

                // Відправляємо повідомлення
                sendMessage(SET_RELAY_EEPROM_UPR_CHANGE_ON_OR_OFF, MESSAGE);
            });
        });
    } else {
        console.log('No rele-temp-change-radio elements found');
    }
}

// relayTempChangeRadio.forEach(function (e, i) {
//     e.addEventListener('change', function () {
//       let ii = Math.trunc(i / 2);
//       if (e.value == '0') {
//         sensorEepromControl.obj[ii].number &= ~(1 << 5);
//       } else if (e.value == '1') {
//         sensorEepromControl.obj[ii].number |= 1 << 5;
//       }
//       s = ii + 'x' + sensorEepromControl.obj[ii].number + 'k';
//       console.log('SET_RELAY_EEPROM_UPR_ONE_OR_TWO_RANGE_TEMP----' + s);
//       sendMessage(SET_RELAY_EEPROM_UPR_CHANGE_ON_OR_OFF, s);
//     });
//   });

function handleChangeRange() {
    const RELAY_TEMP_SINGLE_CHANGE = document.querySelectorAll(CLASS_RELAY_TEMP_CHANGE_SINGLE);

    if (RELAY_TEMP_SINGLE_CHANGE.length > 0) {
        RELAY_TEMP_SINGLE_CHANGE.forEach(function (rangeElement, index) {
            rangeElement.addEventListener('change', function () {
                try {
                    let sensorIndex = Math.trunc(index / 2);
                    let sensorObject = sensorEepromControl.obj[sensorIndex];

                    // Оновлюємо 4-й біт залежно від значення перемикача
                    if (rangeElement.value == '1') {
                        sensorObject.number &= ~(1 << 4); // Вимикаємо 4-й біт (один діапазон)
                    } else if (rangeElement.value == '0') {
                        sensorObject.number |= 1 << 4; // Вмикаємо 4-й біт (два діапазони)
                    }

                    // Формуємо повідомлення
                    const message = `${sensorIndex}x${sensorObject.number}k`;
                    console.log('Sending message: SET_RELAY_EEPROM_UPR_ONE_OR_TWO_RANGE_TEMP - ' + message);

                    // Відправляємо повідомлення
                    sendMessage(SET_RELAY_EEPROM_UPR_ONE_OR_TWO_RANGE_TEMP, message);
                } catch (error) {
                    console.error('Error in handleChangeRange: ', error);
                }
            });
        });
    } else {
        console.log('No rele-temp-change-single elements found');
    }
}



//   function handleChangeRange() {

//     // Один діапазон температур або два
//     RELAY_TEMP_SINGLE_CHANGE.forEach(function (e, i) {
//       e.addEventListener('change', function () {
//         let ii = Math.trunc(i / 2);
//         if (e.value == '1') {
//           sensorEepromControl.obj[ii].number &= ~(1 << 4);
//         } else if (e.value == '0') {
//           sensorEepromControl.obj[ii].number |= 1 << 4;
//         }
//         s = ii + 'x' + sensorEepromControl.obj[ii].number + 'k';
//         console.log('SET_RELAY_EEPROM_UPR_ONE_OR_TWO_RANGE_TEMP----' + s);
//         sendMessage(SET_RELAY_EEPROM_UPR_ONE_OR_TWO_RANGE_TEMP, s);

//       });
//     });
//   }
function handleChangeDataSensor() {
    const CHANGE_BUTTONS = document.querySelectorAll(`${CLASS_ADDRESS_EEPROM_BTN}${CLASS_CHANGE}`);

    if (CHANGE_BUTTONS.length > 0) {
        CHANGE_BUTTONS.forEach(function (button) {
            button.addEventListener('click', function (event) {
                const CURRENT_TARGET = event.currentTarget.closest(CLASS_ADDRESS_EEPROM_DATA);

                // Видаляємо клас CLASS_ACTIVE з усіх інших елементів, крім активного
                parentListEeprom.forEach(function (item) {
                    if (!CURRENT_TARGET.classList.contains(CLASS_ACTIVE)) {
                        item.classList.remove(CLASS_ACTIVE);
                    }
                });

                // Інвертуємо клас CLASS_ACTIVE для  елемента на якому був клік
                CURRENT_TARGET.classList.toggle(CLASS_ACTIVE);

                // Оновлюємо стан клікабельності невибраних термодатчиків
                updateClickableDevices();

                // Якщо елемент став активним, зберігаємо посилання на нього
                if (event.currentTarget.closest(CLASS_ADDRESS_EEPROM_DATA)?.classList.contains(CLASS_ACTIVE)) {
                    selectEepromDataSensor = CURRENT_TARGET;
                }

            });
        });
    } else {
        console.log('No CLASS_ADDRESS_EEPROM_BTN${CLASS_CHANGE} elements found');
    }
}


// function handleChangeDataSensor() {

//     if (document.querySelector(`${CLASS_ADDRESS_EEPROM_BTN}${CLASS_CHANGE}`)) {
//       console.log('YES CLASSES address-eeprom__btn${CLASS_CHANGE}  ' + btnChange.length);
//       btnChange.forEach(function (e) {
//         e.addEventListener('click', function (k) {
//           parentListEeprom.forEach(function (m) {
//             //Видаляємо клас activ  на вісх елементах окрім тих наякі ми зробили клік і вони вже мають activ
//             if (!k.currentTarget.closest(CLASS_ADDRESS_EEPROM_DATA).classList.contains(CLASS_ACTIVE)) {
//               //Якщо ми клікаємо по елементу де вже є клас Activ то ми його не видаляємо
//               m.classList.remove(CLASS_ACTIVE);
//             }
//           });
//           e.closest(CLASS_ADDRESS_EEPROM_DATA).classList.toggle(CLASS_ACTIVE); //інверсія класу
//           updateClickableDevices();
//           if (e.closest(CLASS_ADDRESS_EEPROM_DATA).classList.contains(CLASS_ACTIVE)) {
//             selectEepromDataSensor = e.closest(CLASS_ADDRESS_EEPROM_DATA);
//           }
//         });
//       });
//     } else {
//       console.log('NOT CLASSES address-eeprom__btn${CLASS_CHANGE}');
//     }
//   }
// function handleClearDataSensor() {
//     // Отримуємо всі кнопки з класом 'CLASS_ADDRESS_EEPROM_BTN${CLASS_DATE_TIME}'
//     const clearButtons = document.querySelectorAll(`${CLASS_ADDRESS_EEPROM_BTN}${CLASS_DATE_TIME}`);

//     if (clearButtons.length > 0) {
//         console.log('Found CLASS_ADDRESS_EEPROM_BTN${CLASS_DATE_TIME} elements: ' + clearButtons.length);

//         clearButtons.forEach(function (button) {
//             button.addEventListener('click', function () {
//                 // Знаходимо найближчий контейнер CLASS_ADDRESS_EEPROM_DATA для кожної кнопки
//                 const dataContainer = button.closest(CLASS_ADDRESS_EEPROM_DATA);

//                 if (dataContainer) {
//                     // Очищуємо текст всередині елементів
//                     dataContainer.querySelector(CLASS_ADDRESS_EEPROM_ADDRESS).innerText = '0000000000000000';
//                     dataContainer.querySelector(CLASS_ADDRESS_EEPROM_TEMP).innerText = '';

//                     // Виділяємо несумісні адреси сенсорів
//                     highlightMismatchedSensorAddresses();

//                     // Можна також оновити стан клікабельності пристроїв, якщо потрібно
//                     // updateClickableDevices();
//                 } else {
//                     console.error('No parent .address-eeprom__data found');
//                 }
//             });
//         });
//     } else {
//         console.log('No CLASS_ADDRESS_EEPROM_BTN${CLASS_DATE_TIME} elements found');
//     }
// }
function handleClearDataSensor() {
    // Отримуємо всі кнопки з класом 'CLASS_ADDRESS_EEPROM_BTN${CLASS_DATE_TIME}'
    const CLEAR_BUTTONS = document.querySelectorAll(`${CLASS_ADDRESS_EEPROM_BTN}${CLASS_DATE_TIME}`);

    if (CLEAR_BUTTONS.length > 0) {
        console.log('Found CLASS_ADDRESS_EEPROM_BTN${CLASS_DATE_TIME} elements: ' + CLEAR_BUTTONS.length);

        CLEAR_BUTTONS.forEach(function (button) {
            button.addEventListener('click', function () {
                // Знаходимо найближчий контейнер CLASS_ADDRESS_EEPROM_DATA для кожної кнопки
                const DATA_CONTAINER = button.closest(CLASS_ADDRESS_EEPROM_DATA);

                if (DATA_CONTAINER) {
                    // Очищуємо текст всередині елементів
                    DATA_CONTAINER.querySelector(CLASS_ADDRESS_EEPROM_ADDRESS).innerText = '0000000000000000';
                    DATA_CONTAINER.querySelector(CLASS_ADDRESS_EEPROM_TEMP).innerText = '';

                    // Виділяємо несумісні адреси сенсорів
                    highlightMismatchedSensorAddresses();

                    // Можна також оновити стан клікабельності пристроїв, якщо потрібно
                    updateClickableDevices();
                } else {
                    console.error('No parent .address-eeprom__data found');
                }
            });
        });
    } else {
        console.log('No CLASS_ADDRESS_EEPROM_BTN${CLASS_DATE_TIME} elements found');
    }
}

// function handleClearDataSensor() {
//     if (document.querySelector(`${CLASS_ADDRESS_EEPROM_BTN}${CLASS_DATE_TIME}`)) {
//         console.log('YES CLASSES address-eeprom__btn${CLASS_DATE_TIME} ' + btnClear.length);
//         btnClear.forEach(function (e) {
//             e.addEventListener('click', function () {
//                 const parent = e.closest(CLASS_ADDRESS_EEPROM_DATA);
//                 console.log(parent);
//                 parent.querySelector(CLASS_ADDRESS_EEPROM_ADDRESS).innerText = '0000000000000000';
//                 parent.querySelector(CLASS_ADDRESS_EEPROM_TEMP).innerText = '';
//                 highlightMismatchedSensorAddresses();
//                 //updateClickableDevices();
//             });
//         });
//     } else {
//         console.log('NOT CLASSES address-eeprom__btn${CLASS_DATE_TIME}');
//     }
// }

function handleSelectSensor() {
    // Перевіряємо, чи є елементи з класом '.address-device__data'
    // const deviceElements = document.querySelectorAll('.address-device__data');

    if (parentListDevice.length > 0) {
        console.log('Found .address-device__data elements: ' + parentListDevice.length);

        parentListDevice.forEach(function (deviceElement) {
            deviceElement.addEventListener('click', function () {
                // Перевіряємо, чи елемент має класи 'red' та 'click'
                if (deviceElement.classList.contains('red') && deviceElement.classList.contains('click')) {
                    const addressDevice = deviceElement.querySelector(CLASS_ADDRESS_DEVICE_ADDRESS).textContent;

                    if (selectEepromDataSensor) {
                        // Оновлюємо адресу в елементі CLASS_ADDRESS_EEPROM_ADDRESS
                        selectEepromDataSensor.querySelector(CLASS_ADDRESS_EEPROM_ADDRESS).innerText = addressDevice;

                        // Виділяємо несумісні адреси сенсорів
                        highlightMismatchedSensorAddresses();

                        // Оновлюємо стан клікабельності пристроїв, якщо потрібно
                        // updateClickableDevices();
                    } else {
                        console.error('No active selectEepromDataSensor found');
                    }
                }
            });
        });
    } else {
        console.log('No .address-device__data elements found');
    }
}


// function handleSelectSensor() {

//     if (document.querySelector('.address-device__data')) {
//       console.log('YES CLASSES address-device__data  ' + parentListDevice.length);

//       parentListDevice.forEach(function (e) {
//         //добавляємо датчики яких немає в списку EEPROM
//         e.addEventListener('click', function () {
//           if (e.classList.contains('red') && e.classList.contains('click')) {
//             selectEepromDataSensor.querySelector(CLASS_ADDRESS_EEPROM_ADDRESS).innerText = e.querySelector(CLASS_ADDRESS_DEVICE_ADDRESS).textContent;
//             highlightMismatchedSensorAddresses();
//             // updateClickableDevices();
//           }
//         });
//       });
//     } else {
//       console.log('NOT CLASSES address-device__data');
//     }
//   }
function handleBtnSave() {
    const BTN_SAVE = document.querySelector(CLASS_ADDRESS_EEPROM_SAVE);
    if (BTN_SAVE) {
        console.log('YES CLASSES CLASS_ADDRESS_EEPROM_SAVE');

        BTN_SAVE.addEventListener('click', function () {
            // Збираємо дані адрес сенсорів
            let sensorAddresses = '';
            tableEepromAddress.forEach(function (e, i) {
                if (i > 0) {
                    sensorAddresses += 'na' + e.textContent.toLocaleUpperCase();
                };
            });
            console.log(sensorAddresses);
            sendMessage(OUT_SAVE_DATA_SENSOR_EEPROM, sensorAddresses);

            // Збираємо назви сенсорів

            let sensorNames = '';
            tableEepromNameSensor.forEach(function (e, i) {
                if (i > 0) {
                    sensorNames += '*&' + e.value;
                };
            });
            console.log(sensorNames);
            sendMessage(OUT_SAVE_NAME_SENSOR_EEPROM, sensorNames);
        });
    } else {
        console.log('NOT CLASSES CLASS_ADDRESS_EEPROM_SAVE');
    }
}


// if (BTN_SAVE) {
//     console.log('YES CLASSES CLASS_ADDRESS_EEPROM_SAVE');

//     BTN_SAVE.addEventListener('click', function () {

//         let s = '';
//         tableEepromAddress.forEach(function (e, i) {
//             if (i > 0) {
//                 s += 'na' + e.textContent.toLocaleUpperCase();
//             };
//         });
//         console.log(s);

//         sendMessage(OUT_SAVE_DATA_SENSOR_EEPROM, s);


//         s = '';
//         tableEepromNameSensor.forEach(function (e, i) {
//             if (i > 0) {
//                 s += '*&' + e.value;
//             };
//         });
//         console.log(s);

//         sendMessage(OUT_SAVE_NAME_SENSOR_EEPROM, s);
//     });
// } else {
//     console.log('NOT CLASSES CLASS_ADDRESS_EEPROM_SAVE');
// }
function handleDefineDevice() {
    if (btnDefineDevice) {
        console.log('YES CLASSES popup-menu__btn-define-device');

        btnDefineDevice.addEventListener('click', () => {
            const CONFIRMATION = prompt("Підтвердіть введіть (ok)");

            if (CONFIRMATION === 'ok') {
                // popupClearDevice.classList.remove('disable__global'); // Розкоментувати, якщо потрібно
                sendMessage(SET_DEFINE_DEVICE, 'SET_DEFINE_DEVICE');
                console.log('DEFAULT_DEVICE');
            } else {
                console.log('Введено неправильне значення');
            }
        });
    } else {
        console.log('NOT CLASSES popup-menu__btn-define-device');
    }

}


// if (btnDefineDevice) {
//     console.log('YES CLASSES popup-menu__btn-define-device');
//     btnDefineDevice.onclick = () => {
//         let rezult = prompt("Підтвердіть введіть (ok)");
//         if (rezult === 'ok') {
//             // popapClearDevice.classList.remove('disable__global');
//             sendMessage(SET_DEFINE_DEVICE, 'SET_DEFINE_DEVICE');
//             console.log('DEFAULT_DEVICE');
//         }
//     };
// } else {
//     console.log('NOT CLASSES popup-menu__btn-define-device');
// }


function handleRelaySection() {

    if (relayItem.length > 0) {
        relayItem.forEach((parent, num) => {
            parent.addEventListener('change', (event) => {
                event.stopPropagation(); // Зупинка спливання подій
                const DATA_TIME = parent.querySelectorAll(CLASS_DATE_TIME);
                const TIME = parent.querySelectorAll(CLASS_TIME);

                if (event.target.classList.contains('day')) {
                    checkCheckedDay(event);
                }
                if (event.target.classList.contains('datetime')) {
                    checkDate(parent, DATA_TIME, TIME);
                }
                if (event.target.classList.contains('time')) {
                    checkTime(parent, DATA_TIME, TIME);
                }

                showTimerIcons(parent, DATA_TIME, TIME); // Додає іконки таймера
            });

            parent.addEventListener('click', (event) => {
                event.stopPropagation(); // Зупинка спливання подій

                if (event.target.classList.contains(CLASS_RELAY_SETTING_SWITCH_INPUT)) {
                    showSectionTimeAndSeting(event, parent, CLASS_RELAY_SETTING_SVG, CLASS_RELAY_SECTION_SETTING);
                }
                if (event.target.classList.contains(CLASS_RELAY_TIMER_SETTING_SHOW_INPUT)) {
                    showSectionTimeAndSeting(event, parent, CLASS__RELAY_TIMERsETTING_SVG, CLASS_RELAY_CONTROL_TIMER);
                }
                if (event.target.classList.contains(CLASS_RELAY_CONTROL_MANUAL_SHOW)) {
                    showSectionTimeAndSeting(event, parent, CLASS_INPUT_CONTROL_MANUAL_SVG, CLASS_RELAY_CONTROL_MANUAL, num);
                }
            });
        });
    } else {
        console.log('NOT CLASSES rele__item');
    }

}

// if (relayItem.length > 0) {
//     // console.log('YES CLASSES  rele__item ' + relayItem.length);

//     relayItem.forEach((parent, num) => {

//         parent.addEventListener('change', function (event) {
//             event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
//             const datetime = parent.querySelectorAll(CLASS_DATE_TIME);
//             const time = parent.querySelectorAll(CLASS_TIME);
//             if (event.target.classList.contains('day')) checkCheckedDay(event);
//             if (event.target.classList.contains('datetime')) checkDate(parent, datetime, time);
//             if (event.target.classList.contains('time')) checkTime(parent, datetime, time);
//             showTimerIcons(parent, datetime, time); //Добавляє іконки таймера
//         });

//         parent.addEventListener('click', function (event) {
//             event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);
//             console.log(event.target);
//             if (event.target.classList.contains(CLASS_RELAY_SETTING_SWITCH_INPUT)) showSectionTimeAndSeting(event, parent, CLASS_RELAY_SETTING_SVG, CLASS_RELAY_SECTION_SETTING);
//             if (event.target.classList.contains(CLASS_RELAY_TIMER_SETTING_SHOW_INPUT)) showSectionTimeAndSeting(event, parent, CLASS__RELAY_TIMERsETTING_SVG, CLASS_RELAY_CONTROL_TIMER);
//             if (event.target.classList.contains(CLASS_RELAY_CONTROL_MANUAL_SHOW)) showSectionTimeAndSeting(event, parent, CLASS_INPUT_CONTROL_MANUAL_SVG, CLASS_RELAY_CONTROL_MANUAL, num);
//         });

//     });
// } else {
//     console.log('NOT CLASSES  rele__item ');
// }
function handleSaveTime() {

    if (timeBtn.length > 0) {
        console.log('YES CLASSES time__btn ' + timeBtn.length);

        timeBtn.forEach((e, i) => {
            e.addEventListener('click', () => {
                const parent = e.closest(CLASS_RELAY_ITEM);
                const errorClasses = parent.querySelectorAll(`${CLASS_DATE_RED_COLOR}, ${CLASS_TIME_RED_COLOR}, ${CLASS_DATE_BLUE_BACKGROUND}, ${CLASS_TIME_BLUE_BACKGROUND}, ${CLASS_TIME_RED_BACKGROUND}`);

                if (errorClasses.length > 0) {
                    // Якщо є помилки
                    const popapError = document.querySelector('.popap_error');
                    popapError.classList.add('popap_error-show');

                    let counter = 0;
                    const timerId = setInterval(() => {
                        errorClasses.forEach(el => {
                            el.classList.toggle('blink__eror-red', counter % 2 === 0);
                        });

                        if (++counter > 9) {
                            clearInterval(timerId);
                            popapError.classList.remove('popap_error-show');
                        }
                    }, 300);
                } else {
                    // Якщо немає помилок
                    const dayElements = parent.querySelectorAll('.day');
                    let dataString = `RELE${i}-${delayWhenTurned[i].value}-`;

                    dateTimeArray[i].dateTimeRealList.forEach(dateTime => {
                        if (dateTime instanceof Date && !isNaN(dateTime)) {
                            const timestamp = Math.floor(dateTime.getTime() / 1000);
                            dataString += `${timestamp}-${dateTime.getFullYear()}-${dateTime.getMonth() + 1}-${dateTime.getDate()}-${dateTime.getHours()}-${dateTime.getMinutes()}-${dateTime.getDay()}-`;
                        } else {
                            dataString += '4294967295-65535-99-99-99-99-';
                        }
                    });

                    dateTimeArray[i].timeRealList.forEach(time => {
                        dataString += time ? `${time.getHours()}-${time.getMinutes()}-` : '99-99-';
                    });

                    dayElements.forEach(e => {
                        dataString += e.checked ? '1-' : '0-';
                    });

                    console.log(dataString);
                    sendMessage(SET_RELAY_DATA_TIME, dataString);
                }
            });
        });
    } else {
        console.log('NOT CLASSES time__btn ');
    }

}


//  // 2022-06-12T00:00 format input date set

//  if (timeBtn.length > 0) {
//     console.log('YES CLASSES  time__btn ' + timeBtn.length);

//     timeBtn.forEach(function (e, i) {

//       e.addEventListener('click', function (ee) {
//         const parent = e.closest(CLASS_RELAY_ITEM);
//         // let numberReleClick = parent.getAttribute('data-rele');
//         // console.log(i);
//         const error_class = parent.querySelectorAll('.date-red__color, CLASS_TIME_RED_COLOR, .date-blue__backround, .time-blue__backround,  .time-red__backround');

//         // console.log('length error  ' + error_class.length);

//         if (error_class.length > 0) {

//           //Якщо є класи з помилками

//           const popapError = document.querySelector('.popap_error');
//           popapError.classList.add('popap_error-show');
//           let counter = 0;

//           let timerId = setInterval(function () {
//             error_class.forEach(function (e) {
//               if (counter % 2 == 0) e.classList.add('blink__eror-red');
//               if (counter % 2 != 0) e.classList.remove('blink__eror-red');
//             });

//             counter++;
//             // console.log('counter  ' + counter);
//             if (counter > 9) {
//               clearTimeout(timerId);
//               popapError.classList.remove('popap_error-show');
//             }
//           }, 300);
//         } else {
//           //Якщо нема класів з помилками то відправляємо повідомлення
//           //Відправляємо дані
//           // console.log(delayWhenTurned[i].value);

//           const dayElement = parent.querySelectorAll('.day');
//           let _s = 'RELE' + i + '-' + delayWhenTurned[i].value + '-';

//           for (nn = 0; nn < 10; nn++) {
//             // console.log('dayElement  ' + dateTimeArray[i].dateTimeRealList[nn]);

//             if (dateTimeArray[i].dateTimeRealList[nn] != 'Invalid Date') {
//               // console.log('dayElement  ' + dateTimeArray[i].dateTimeRealList[nn]);
//               let dateInput = new Date(dateTimeArray[i].dateTimeRealList[nn]).getTime();
//               dateInput = dateInput / 1000;
//               console.log("ZZZZZZZZZZZZ");
//               console.log(dateTimeArray[i].dateTimeRealList[nn]);
//               _s += dateInput + '-'; //Рік  v minute
//               _s += dateTimeArray[i].dateTimeRealList[nn].getFullYear() + '-'; //Рік
//               _s += dateTimeArray[i].dateTimeRealList[nn].getMonth() + 1 + '-'; //Місяць
//               _s += dateTimeArray[i].dateTimeRealList[nn].getDate() + '-'; //день 1-31
//               _s += dateTimeArray[i].dateTimeRealList[nn].getHours() + '-'; //Година
//               _s += dateTimeArray[i].dateTimeRealList[nn].getMinutes() + '-'; //Хвилина
//               _s += dateTimeArray[i].dateTimeRealList[nn].getDay() + '-'; //День тижня 0-6
//             } else {
//               _s += '4294967295-65535-99-99-99-99-99-'; //День тижня 0-6
//             }
//           }

//           for (nn = 0; nn < 50; nn++) {
//             // console.log( "HHHHHHHHH  " );

//             console.log(dateTimeArray[i].timeRealList[nn]);

//             if (dateTimeArray[i].timeRealList[nn] != undefined && dateTimeArray[i].timeRealList[nn] != '') {
//               _s += dateTimeArray[i].timeRealList[nn].getHours() + "-" + dateTimeArray[i].timeRealList[nn].getMinutes() + '-';
//             } else _s += '99-99-';
//           }

//           // s += 'DAY---';
//           dayElement.forEach(function (e) {
//             if (e.checked) {
//               _s += '1-';
//             } else {
//               _s += '0-';
//             }
//           });
//           console.log(_s);

//           sendMessage(SET_RELAY_DATA_TIME, _s);

//         }
//       });
//     });
//   } else {
//     console.log('NOT CLASSES  time__btn ');
//   }
function handleClearTime() {
    if (timeBtnClear.length > 0) {
        console.log(`YES CLASSES time__btn-clear ${timeBtnClear.length}`);

        timeBtnClear.forEach((btn, index) => {
            btn.addEventListener('click', () => {
                messageDate(index);

                const DATA_TIME_AND_TIME_ELEMENTS = relayItem[index].querySelectorAll(`${CLASS_DATE_TIME}, ${CLASS_TIME}`);
                DATA_TIME_AND_TIME_ELEMENTS.forEach(element => element.value = '');
            });
        });
    } else {
        console.log('NOT CLASSES time__btn-clear');
    }
}



// if (timeBtnClear.length > 0) {
//     console.log('YES CLASSES  time__btn-clear ' + timeBtnClear.length);
//     timeBtnClear.forEach(function (e, i) {
//       e.addEventListener('click', function () {
//         messageDate(i);
//         relayItem[i].querySelectorAll(`${CLASS_DATE_TIME}, ${CLASS_TIME}).forEach(function (e) {
//           e.value = '';
//         });
//       });
//     });
//   } else {
//     console.log('NOT CLASSES  time__btn-clear ');
//   }
function removeShowBlock() {
    const timerDateItems = document.querySelectorAll('.timer-date__item');

    // Переконатися, що є знайдені елементи
    if (timerDateItems.length > 0) {
        timerDateItems.forEach(item => {
            item.classList.remove('show-block');
        });
    }
}

function printPin() {
    if (relayItemTitlePin.length > 0) {
        console.log(`YES CLASSES rele__item-title-pin ${relayItemTitlePin.length}`);

        const pinLabels = ['PIN 5', 'PIN 4', 'PIN 0', 'PIN 2', 'PIN 12', 'PIN 13', 'PIN 3', 'PIN 1'];

        relayItemTitlePin.forEach((element, index) => {
            if (index < pinLabels.length) {
                element.textContent = pinLabels[index];
            }
        });
    } else {
        console.log(`NOT CLASSES rele__item-title-pin ${relayItemTitlePin.length}`);
    }
}

function initDateTimeArray() {
    // Перевірка на вже існуючі дані
    if (dateTimeArray.length === 0) {
        dateTimeArray = Array.from({ length: 8 }, () => ({
            dateTimeList: [],
            dateTimeRealList: [],
            timeList: [],
            timeRealList: []
        }));
    } else {
        console.warn('dateTimeArray вже ініціалізовано.');
    }
}

const startAllFunctions = () => {
    return new Promise(resolve => {
        startIntervals();
        removeShowBlock();
        printPin();
        handleManualControl();
        handleShowTable();
        handleRelayTempOn();
        handleChangeSelect();
        handleChangeTempOnOff();
        handleSaveNameRelay();
        handleInputControlError();
        handleRelayTempChangeRadio();
        handleChangeRange();
        handleChangeDataSensor();
        handleClearDataSensor();
        handleSelectSensor();
        handleBtnSave();
        handleDefineDevice();
        handleRelaySection();
        handleSaveTime();
        handleClearTime();
        console.log('start function startAllFunctions()');
        resolve();
    });
}
const popupInfoWrapper = document.querySelector(CLASS_POPUP_INFO_WRAPPER);
$(document).ready(function () {
    $("#menu").on("click", "a", function (event) {
        event.preventDefault();//при нажатии на ссылку, мы переходим по адресу этой ссылки. Вызов preventDefault() отменит это поведение
        var id = $(this).attr('href'),
            top = $(id).offset().top - popupInfoWrapper.clientHeight - 20;
        $('body,html').animate({
            scrollTop: top
        }, 1000);
    });
});

function onMessageArrived11(message) {
    setTimeout(() => {
        // called when a message arrives
        // console.log("onMessageArrived:  " + message.payloadString);
        //  console.log("onMessageArrived:  "+message.destinationName);
        //************************************************************************************************************** */
        if (message.destinationName === GET_ANALOG_INPUT_A0) {
            // console.log(message.payloadString);
            printAnalogInput.innerText = message.payloadString;
        }
        //************************************************************************************************************** */
        if (message.destinationName === CONNECT_SSID) {
            // console.log(message.payloadString);
            document.querySelector('.info__ssid').innerText = message.payloadString;
        }
        //************************************************************************************************************** */

        if (message.destinationName === LOCAL_IP) {
            // console.log(message.payloadString);
            document.querySelector('.info__ip').innerText = message.payloadString;
        }

        //************************************************************************************************************** */

        if (message.destinationName === GET_EEPROM_SENSOR_DATA) {
            //Дані що знаходяться в EEPROM позиція, мак адрес, і температура сенсору
            eepromData = JSON.parse(message.payloadString);
            // console.log(eepromData );
            for (let _k = 0; _k < eepromData.obj.length; _k++) {
                if (showEepromData) {
                    tableEepromNumber[_k + 1].innerText = eepromData.obj[_k].number;
                    tableEepromAddress[_k + 1].innerText = eepromData.obj[_k].address.toLocaleUpperCase();
                }
                tableEepromTemp[_k + 1].innerText = eepromData.obj[_k].temp.toFixed(1);

                if (eepromData.obj[_k].address != '0000000000000000') {
                    if (sensorNames.obj != undefined) {
                        popupTemp[_k].textContent = (sensorNames.obj[_k].nameSensor) + ' ' + (eepromData.obj[_k].temp.toFixed(1));
                    } else {
                        popupTemp[_k].innerText = eepromData.obj[_k].temp.toFixed(1);
                    }
                } else {
                    popupTemp[_k].closest('.popup-info__lamp-item').classList.add('shiden');
                }
            }

            isEepromDataDownloaded = true;
            if (isDeviceDataDownloaded && isEepromDataDownloaded) highlightMismatchedSensorAddresses();
        }

        //************************************************************************************************************** */

        if (message.destinationName === GET_DEVICE_SENSOR_DATA) {
            //Дані прочитані з сенсорів в реальному часі позиція, мак адрес, і температура сенсору
            deviceData = JSON.parse(message.payloadString);
            // console.log('deviceData ');
            // console.log(deviceData );
            for (let _k2 = 0; _k2 < deviceData.obj.length; _k2++) {
                tableDeviceNumber[_k2 + 1].innerText = deviceData.obj[_k2].number;
                tableDeviceAddress[_k2 + 1].innerText = deviceData.obj[_k2].address.toLocaleUpperCase();
                tableDeviceTemp[_k2 + 1].innerText = deviceData.obj[_k2].temp.toFixed(1);
            }
            isDeviceDataDownloaded = true;
            if (isDeviceDataDownloaded && isEepromDataDownloaded) {
                updateRelaySettings();
                highlightMismatchedSensorAddresses();
            }
        }

        //************************************************************************************************************** */
        //біт 0-3 номер датчика який управляє даним реле
        // біт 4 один або два діапазона контроля температрур
        // біт 5 вкл або викл реле при зміні температур або таймера
        // біт 6 стан реле при помилці термодатчмка
        if (message.destinationName === GET_RELAY_EEPROM_UPR) {
            //получаємо дані з памяті про датчики 
            sensorEepromControl = JSON.parse(message.payloadString);
            // console.log('sensorEepromControl  *****');
            // console.log(sensorEepromControl );
            updateRelaySettings();
        }
        //************************************************************************************************************** */

        if (message.destinationName === GET_SENSOR_TEMP_ON_OFF) {
            //получаємо дані з памяті про температури включення і відкючення
            sensorOpenCloseTemperature = JSON.parse(message.payloadString);
            // console.log('sensorOpenCloseTemperature  *****');
            // console.log(message.payloadString);
            updateRelayTemperatureSettings();
        }

        //************************************************************************************************************** */

        if (message.destinationName === RELAY_STATUS) {
            //получаємо дані про стан кожного реле включене або відключене 
            const stanReleTemp = parseInt(message.payloadString);
            const releOnOff = document.querySelectorAll(CLASS_RELAY_CONTROL_MANUAL_ON_OFF);
            for (n = 0; n < 8; n++) {
                //Засвічуємо або гасимо лампочки
                if (stanReleTemp & 1 << n) {
                    releOnOff[n].checked = false;
                    popupInfoTempItem[n].classList.remove('on')
                } else {
                    releOnOff[n].checked = true;
                    popupInfoTempItem[n].classList.add('on');
                }
            }
        }

        //************************************************************************************************************** */

        if (message.destinationName === GET_SENSOR_NAME) {

            try {
                // console.log('GET_SENSOR_NAME');
                // console.log(message.payloadString);
                sensorNames = JSON.parse(message.payloadString);
                tableEepromNameSensor.forEach(function (e, i) {

                    if (i > 0) {
                        e.value = sensorNames.obj[i - 1].nameSensor;
                    }
                });
                // console.log(sensorNames);

            } catch (e) {
                console.log('ERROR NAME SENSOR' + e);
                sendMessage(SET_DEFINE_DEVICE, 'SET_DEFINE_DEVICE');
                console.log('DEFAULT_DEVICE');
            }
        }

        //************************************************************************************************************** */

        if (message.destinationName === GET_RELAY_NAME) {
            try {
                // console.log('GET_RELAY_NAME');
                // console.log(message.payloadString);
                relayNames = JSON.parse(message.payloadString);
                const releItemTitleName = document.querySelectorAll('.rele__item-title-name');
                releItemTitleName.forEach((e, i) => {
                    e.textContent = relayNames.obj[i].nameRele;
                });

                relayNameInput.forEach(function (e, i) {
                    e.value = relayNames.obj[i].nameRele;
                    popupInfoTempItem[i].textContent = relayNames.obj[i].nameRele;
                    releItemTitleName[i].textContent = relayNames.obj[i].nameRele;
                });
                // console.log('relayNames');

            } catch (e) {
                console.log('ERROR NAME RELE' + e);
                sendMessage(SET_DEFINE_DEVICE, 'SET_DEFINE_DEVICE');
                console.log('DEFAULT_DEVICE');
            }
        }
        //" "
        //************************************************************************************************************** */

        if (message.destinationName === GET_RELAY_EEPROM_CONTROL_MANUAL) {


            let relaySettings = JSON.parse(message.payloadString);
            console.log('message.payloadString   ////// GET_RELAY_EEPROM_CONTROL_MANUAL');
            console.log(message.payloadString);
            document.querySelectorAll(CLASS_INPUT_CONTROL_MANUAL_SVG).forEach(function (e, i) {
                const parent = e.closest(CLASS_RELAY_ITEM);
                if (relaySettings.obj[i].namberRele == 1) {
                    parent.querySelector(CLASS_INPUT_CONTROL_MANUAL_SVG).classList.add('on');
                    parent.querySelector('.CLASS_RELAY_CONTROL_MANUAL_SHOW').classList.add('on');
                    parent.querySelector(CLASS_RELAY_CONTROL_MANUAL).classList.add('show-block'); //Добавляємо клас відкриваємо Select
                    parent.querySelector(CLASS_RELAY_SETTING_SENSOR_TIMER).classList.add('block__hidden'); //Добавляємо клас відкриваємо Select
                } else if (relaySettings.obj[i].namberRele == 0) {
                    parent.querySelector(CLASS_INPUT_CONTROL_MANUAL_SVG).classList.remove('on');
                    parent.querySelector('.CLASS_RELAY_CONTROL_MANUAL_SHOW').classList.remove('on');
                    parent.querySelector(CLASS_RELAY_CONTROL_MANUAL).classList.remove('show-block');
                    parent.querySelector(CLASS_RELAY_SETTING_SENSOR_TIMER).classList.remove('block__hidden'); //Добавляємо клас відкриваємо Select
                }
            });

        }

        //************************************************************************************************************** */

        if (message.destinationName === GET_RELAY_DATA_TIME) {

            //получаємо дані про таймери
            const tempObj = JSON.parse(message.payloadString);
            // console.log(message.payloadString);
            if (tempObj.NUMPACKAGE === 1) {
                obj_1 = Object.assign({}, tempObj);
            }

            if (tempObj.NUMPACKAGE === 2) {
                obj_2 = Object.assign({}, tempObj);
                // console.log('obj_2');
                // console.log(obj_2);
            }

            if (tempObj.NUMPACKAGE === 3) {
                obj_2.TIME = obj_2.TIME.concat(tempObj.TIME);
                //  console.log('obj_2');
                //  console.log(obj_2);
            }

            if (tempObj.NUMPACKAGE === 4) {
                obj_3 = Object.assign({}, tempObj);
                relaySettings = Object.assign(obj_1, obj_2, obj_3);
                // console.log(relaySettings);
                const namberRele = parseInt(relaySettings.NUM);
                const dateTimeInput = relayItem[namberRele].querySelectorAll(CLASS_DATE_TIME);
                const timeInput = relayItem[namberRele].querySelectorAll(CLASS_TIME);
                const dayWikend = relayItem[namberRele].querySelectorAll('.day');

                dateTimeInput.forEach(function (e) {
                    e.value = '';
                });

                timeInput.forEach(function (e) {
                    e.value = '';
                });

                dayWikend.forEach(function (e) {
                    e.checked = true; //ttt
                });

                const delaySecondStart = parseInt(relaySettings.DELAYSECONDSTART);

                if (delaySecondStart < 36000) relayControlTimer[namberRele].value = delaySecondStart;
                else relayControlTimer[namberRele].value = '0';

                // dateTimeInput[0].value = "2022-05-02T12:55";
                for (i = 0; i < 9; i += 2) {
                    if (relaySettings.DATATIME[i] != '65535-99-99T99:99' && relaySettings.DATATIME[i + 1] != '65535-99-99T99:99') {
                        // console.log(relaySettings.DATATIME[i]);
                        // console.log(relaySettings.DATATIME[i + 1]);
                        dateTimeInput[i].value = relaySettings.DATATIME[i];
                        dateTimeInput[i + 1].value = relaySettings.DATATIME[i + 1];
                        dateTimeArray[namberRele].dateTimeList[i] = new Date(relaySettings.DATATIME[i]).getTime();
                        dateTimeArray[namberRele].dateTimeRealList[i] = new Date(relaySettings.DATATIME[i]);
                        dateTimeArray[namberRele].dateTimeList[i + 1] = new Date(relaySettings.DATATIME[i + 1]).getTime();
                        dateTimeArray[namberRele].dateTimeRealList[i + 1] = new Date(relaySettings.DATATIME[i + 1]);
                    }
                }

                for (i = 0; i < 49; i += 2) {
                    if (relaySettings.TIME[i] != '99:99' && relaySettings.TIME[i + 1] != '99:99') {
                        // console.log(relaySettings.TIME[i]); 
                        // console.log( relaySettings.TIME[i+1]);
                        timeInput[i].value = relaySettings.TIME[i];
                        timeInput[i + 1].value = relaySettings.TIME[i + 1];
                        dateTimeArray[namberRele].timeList[i] = new Date(relaySettings.DATATIME[i]);
                        dateTimeArray[namberRele].timeRealList[i + 1] = new Date(relaySettings.DATATIME[i + 1]);
                    }
                }

                for (i = 0; i < 35; i++) {
                    if (relaySettings.DEY[i] == 1) {
                        dayWikend[i].checked = true;
                        dayWikend[i].previousElementSibling.classList.add('checked');
                    }
                    if (relaySettings.DEY[i] == 0) {
                        dayWikend[i].checked = false;
                        dayWikend[i].previousElementSibling.classList.remove('checked');
                    }
                }

                relayItem.forEach((parent) => {
                    const datetime = parent.querySelectorAll(CLASS_DATE_TIME);
                    const time = parent.querySelectorAll(CLASS_TIME);
                    checkDate(parent, datetime, time);
                    checkTime(parent, datetime, time);
                    showTimerIcons(parent, datetime, time); //Добавляє іконки таймера

                });

            }
            // 2022-5-17T14:26
        }
        //************************************************************************************************************** */
    }, 1000);

}

